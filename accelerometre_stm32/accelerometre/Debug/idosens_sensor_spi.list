
idosens_sensor_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003354  08003354  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003354  08003354  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003354  08003354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003358  08003358  00013358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800335c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080033cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080033cc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dfb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000155a  00000000  00000000  00027e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e8  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  00029bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001402a  00000000  00000000  0002a308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006694  00000000  00000000  0003e332  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b6a0  00000000  00000000  000449c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  000c00e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080032c8 	.word	0x080032c8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080032c8 	.word	0x080032c8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000192:	2300      	movs	r3, #0
 8000194:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000196:	2003      	movs	r0, #3
 8000198:	f000 f938 	bl	800040c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800019c:	2000      	movs	r0, #0
 800019e:	f000 f80d 	bl	80001bc <HAL_InitTick>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d002      	beq.n	80001ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
 80001ac:	e001      	b.n	80001b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ae:	f002 fae1 	bl	8002774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001c4:	2300      	movs	r3, #0
 80001c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001c8:	4b16      	ldr	r3, [pc, #88]	; (8000224 <HAL_InitTick+0x68>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d022      	beq.n	8000216 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001d0:	4b15      	ldr	r3, [pc, #84]	; (8000228 <HAL_InitTick+0x6c>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <HAL_InitTick+0x68>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f938 	bl	800045a <HAL_SYSTICK_Config>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10f      	bne.n	8000210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b0f      	cmp	r3, #15
 80001f4:	d809      	bhi.n	800020a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f6:	2200      	movs	r2, #0
 80001f8:	6879      	ldr	r1, [r7, #4]
 80001fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001fe:	f000 f910 	bl	8000422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000202:	4a0a      	ldr	r2, [pc, #40]	; (800022c <HAL_InitTick+0x70>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	e007      	b.n	800021a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800020a:	2301      	movs	r3, #1
 800020c:	73fb      	strb	r3, [r7, #15]
 800020e:	e004      	b.n	800021a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000210:	2301      	movs	r3, #1
 8000212:	73fb      	strb	r3, [r7, #15]
 8000214:	e001      	b.n	800021a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000216:	2301      	movs	r3, #1
 8000218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000004 	.word	0x20000004
 8000228:	20000008 	.word	0x20000008
 800022c:	20000000 	.word	0x20000000

08000230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_IncTick+0x1c>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <HAL_IncTick+0x20>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4413      	add	r3, r2
 800023e:	4a03      	ldr	r2, [pc, #12]	; (800024c <HAL_IncTick+0x1c>)
 8000240:	6013      	str	r3, [r2, #0]
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000098 	.word	0x20000098
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return uwTick;
 8000258:	4b02      	ldr	r3, [pc, #8]	; (8000264 <HAL_GetTick+0x10>)
 800025a:	681b      	ldr	r3, [r3, #0]
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	20000098 	.word	0x20000098

08000268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000270:	f7ff fff0 	bl	8000254 <HAL_GetTick>
 8000274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000280:	d004      	beq.n	800028c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <HAL_Delay+0x40>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4413      	add	r3, r2
 800028a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800028c:	bf00      	nop
 800028e:	f7ff ffe1 	bl	8000254 <HAL_GetTick>
 8000292:	4602      	mov	r2, r0
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	429a      	cmp	r2, r3
 800029c:	d8f7      	bhi.n	800028e <HAL_Delay+0x26>
  {
  }
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000004 	.word	0x20000004

080002ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	db0a      	blt.n	800033a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	490c      	ldr	r1, [pc, #48]	; (800035c <__NVIC_SetPriority+0x4c>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000338:	e00a      	b.n	8000350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <__NVIC_SetPriority+0x50>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	f003 030f 	and.w	r3, r3, #15
 8000346:	3b04      	subs	r3, #4
 8000348:	0112      	lsls	r2, r2, #4
 800034a:	b2d2      	uxtb	r2, r2
 800034c:	440b      	add	r3, r1
 800034e:	761a      	strb	r2, [r3, #24]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000e100 	.word	0xe000e100
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	f1c3 0307 	rsb	r3, r3, #7
 800037e:	2b04      	cmp	r3, #4
 8000380:	bf28      	it	cs
 8000382:	2304      	movcs	r3, #4
 8000384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3304      	adds	r3, #4
 800038a:	2b06      	cmp	r3, #6
 800038c:	d902      	bls.n	8000394 <NVIC_EncodePriority+0x30>
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	3b03      	subs	r3, #3
 8000392:	e000      	b.n	8000396 <NVIC_EncodePriority+0x32>
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	43da      	mvns	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	401a      	ands	r2, r3
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43d9      	mvns	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	4313      	orrs	r3, r2
         );
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3724      	adds	r7, #36	; 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d8:	d301      	bcc.n	80003de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003da:	2301      	movs	r3, #1
 80003dc:	e00f      	b.n	80003fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <SysTick_Config+0x40>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e6:	210f      	movs	r1, #15
 80003e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003ec:	f7ff ff90 	bl	8000310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SysTick_Config+0x40>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x40>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f7ff ff49 	bl	80002ac <__NVIC_SetPriorityGrouping>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	4603      	mov	r3, r0
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000434:	f7ff ff5e 	bl	80002f4 <__NVIC_GetPriorityGrouping>
 8000438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	6978      	ldr	r0, [r7, #20]
 8000440:	f7ff ff90 	bl	8000364 <NVIC_EncodePriority>
 8000444:	4602      	mov	r2, r0
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff5f 	bl	8000310 <__NVIC_SetPriority>
}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffb0 	bl	80003c8 <SysTick_Config>
 8000468:	4603      	mov	r3, r0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800048a:	e154      	b.n	8000736 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f000 8146 	beq.w	8000730 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2b02      	cmp	r3, #2
 80004aa:	d003      	beq.n	80004b4 <HAL_GPIO_Init+0x40>
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2b12      	cmp	r3, #18
 80004b2:	d123      	bne.n	80004fc <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	08da      	lsrs	r2, r3, #3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3208      	adds	r2, #8
 80004bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	f003 0307 	and.w	r3, r3, #7
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	220f      	movs	r2, #15
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	693a      	ldr	r2, [r7, #16]
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	691a      	ldr	r2, [r3, #16]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	f003 0307 	and.w	r3, r3, #7
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	08da      	lsrs	r2, r3, #3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3208      	adds	r2, #8
 80004f6:	6939      	ldr	r1, [r7, #16]
 80004f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2203      	movs	r2, #3
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4013      	ands	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f003 0203 	and.w	r2, r3, #3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	4313      	orrs	r3, r2
 8000528:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00b      	beq.n	8000550 <HAL_GPIO_Init+0xdc>
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d007      	beq.n	8000550 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000544:	2b11      	cmp	r3, #17
 8000546:	d003      	beq.n	8000550 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b12      	cmp	r3, #18
 800054e:	d130      	bne.n	80005b2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2203      	movs	r2, #3
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	4013      	ands	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	4313      	orrs	r3, r2
 8000578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000586:	2201      	movs	r2, #1
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	091b      	lsrs	r3, r3, #4
 800059c:	f003 0201 	and.w	r2, r3, #1
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	2203      	movs	r2, #3
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	4013      	ands	r3, r2
 80005c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f000 80a0 	beq.w	8000730 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <HAL_GPIO_Init+0x2dc>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a56      	ldr	r2, [pc, #344]	; (8000750 <HAL_GPIO_Init+0x2dc>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6213      	str	r3, [r2, #32]
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <HAL_GPIO_Init+0x2dc>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000608:	4a52      	ldr	r2, [pc, #328]	; (8000754 <HAL_GPIO_Init+0x2e0>)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	089b      	lsrs	r3, r3, #2
 800060e:	3302      	adds	r3, #2
 8000610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000614:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	220f      	movs	r2, #15
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a4a      	ldr	r2, [pc, #296]	; (8000758 <HAL_GPIO_Init+0x2e4>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d019      	beq.n	8000668 <HAL_GPIO_Init+0x1f4>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <HAL_GPIO_Init+0x2e8>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d013      	beq.n	8000664 <HAL_GPIO_Init+0x1f0>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a48      	ldr	r2, [pc, #288]	; (8000760 <HAL_GPIO_Init+0x2ec>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d00d      	beq.n	8000660 <HAL_GPIO_Init+0x1ec>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a47      	ldr	r2, [pc, #284]	; (8000764 <HAL_GPIO_Init+0x2f0>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d007      	beq.n	800065c <HAL_GPIO_Init+0x1e8>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a46      	ldr	r2, [pc, #280]	; (8000768 <HAL_GPIO_Init+0x2f4>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d101      	bne.n	8000658 <HAL_GPIO_Init+0x1e4>
 8000654:	2304      	movs	r3, #4
 8000656:	e008      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000658:	2305      	movs	r3, #5
 800065a:	e006      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 800065c:	2303      	movs	r3, #3
 800065e:	e004      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000660:	2302      	movs	r3, #2
 8000662:	e002      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000668:	2300      	movs	r3, #0
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	f002 0203 	and.w	r2, r2, #3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4093      	lsls	r3, r2
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	4313      	orrs	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800067a:	4936      	ldr	r1, [pc, #216]	; (8000754 <HAL_GPIO_Init+0x2e0>)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	3302      	adds	r3, #2
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <HAL_GPIO_Init+0x2f8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	43db      	mvns	r3, r3
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	4013      	ands	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000700:	4a1a      	ldr	r2, [pc, #104]	; (800076c <HAL_GPIO_Init+0x2f8>)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_GPIO_Init+0x2f8>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43db      	mvns	r3, r3
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <HAL_GPIO_Init+0x2f8>)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	fa22 f303 	lsr.w	r3, r2, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	f47f aea3 	bne.w	800048c <HAL_GPIO_Init+0x18>
  } 
}
 8000746:	bf00      	nop
 8000748:	371c      	adds	r7, #28
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40023800 	.word	0x40023800
 8000754:	40010000 	.word	0x40010000
 8000758:	40020000 	.word	0x40020000
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40010400 	.word	0x40010400

08000770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	807b      	strh	r3, [r7, #2]
 800077c:	4613      	mov	r3, r2
 800077e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000780:	787b      	ldrb	r3, [r7, #1]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800078c:	e003      	b.n	8000796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	041a      	lsls	r2, r3, #16
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	619a      	str	r2, [r3, #24]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e31d      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007b2:	4b94      	ldr	r3, [pc, #592]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	f003 030c 	and.w	r3, r3, #12
 80007ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007bc:	4b91      	ldr	r3, [pc, #580]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d07b      	beq.n	80008ca <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	2b08      	cmp	r3, #8
 80007d6:	d006      	beq.n	80007e6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d10f      	bne.n	80007fe <HAL_RCC_OscConfig+0x5e>
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e4:	d10b      	bne.n	80007fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e6:	4b87      	ldr	r3, [pc, #540]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d06a      	beq.n	80008c8 <HAL_RCC_OscConfig+0x128>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d166      	bne.n	80008c8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e2f7      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d106      	bne.n	8000814 <HAL_RCC_OscConfig+0x74>
 8000806:	4b7f      	ldr	r3, [pc, #508]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a7e      	ldr	r2, [pc, #504]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e02d      	b.n	8000870 <HAL_RCC_OscConfig+0xd0>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10c      	bne.n	8000836 <HAL_RCC_OscConfig+0x96>
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a78      	ldr	r2, [pc, #480]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b76      	ldr	r3, [pc, #472]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a75      	ldr	r2, [pc, #468]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800082e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e01c      	b.n	8000870 <HAL_RCC_OscConfig+0xd0>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b05      	cmp	r3, #5
 800083c:	d10c      	bne.n	8000858 <HAL_RCC_OscConfig+0xb8>
 800083e:	4b71      	ldr	r3, [pc, #452]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a70      	ldr	r2, [pc, #448]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b6e      	ldr	r3, [pc, #440]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a6d      	ldr	r2, [pc, #436]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	e00b      	b.n	8000870 <HAL_RCC_OscConfig+0xd0>
 8000858:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a69      	ldr	r2, [pc, #420]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800085e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b67      	ldr	r3, [pc, #412]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a66      	ldr	r2, [pc, #408]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800086a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800086e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000878:	f7ff fcec 	bl	8000254 <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000880:	f7ff fce8 	bl	8000254 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e2ad      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000892:	4b5c      	ldr	r3, [pc, #368]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f0      	beq.n	8000880 <HAL_RCC_OscConfig+0xe0>
 800089e:	e014      	b.n	80008ca <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcd8 	bl	8000254 <HAL_GetTick>
 80008a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80008a6:	e008      	b.n	80008ba <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a8:	f7ff fcd4 	bl	8000254 <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	2b64      	cmp	r3, #100	; 0x64
 80008b4:	d901      	bls.n	80008ba <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80008b6:	2303      	movs	r3, #3
 80008b8:	e299      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f0      	bne.n	80008a8 <HAL_RCC_OscConfig+0x108>
 80008c6:	e000      	b.n	80008ca <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d05a      	beq.n	800098c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d005      	beq.n	80008e8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	2b0c      	cmp	r3, #12
 80008e0:	d119      	bne.n	8000916 <HAL_RCC_OscConfig+0x176>
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d116      	bne.n	8000916 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d005      	beq.n	8000900 <HAL_RCC_OscConfig+0x160>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d001      	beq.n	8000900 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e276      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	691b      	ldr	r3, [r3, #16]
 800090c:	021b      	lsls	r3, r3, #8
 800090e:	493d      	ldr	r1, [pc, #244]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000910:	4313      	orrs	r3, r2
 8000912:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000914:	e03a      	b.n	800098c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d020      	beq.n	8000960 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <HAL_RCC_OscConfig+0x268>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000924:	f7ff fc96 	bl	8000254 <HAL_GetTick>
 8000928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800092a:	e008      	b.n	800093e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800092c:	f7ff fc92 	bl	8000254 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b02      	cmp	r3, #2
 8000938:	d901      	bls.n	800093e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e257      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f0      	beq.n	800092c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	492a      	ldr	r1, [pc, #168]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 800095a:	4313      	orrs	r3, r2
 800095c:	604b      	str	r3, [r1, #4]
 800095e:	e015      	b.n	800098c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <HAL_RCC_OscConfig+0x268>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000966:	f7ff fc75 	bl	8000254 <HAL_GetTick>
 800096a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800096c:	e008      	b.n	8000980 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800096e:	f7ff fc71 	bl	8000254 <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b02      	cmp	r3, #2
 800097a:	d901      	bls.n	8000980 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e236      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1f0      	bne.n	800096e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0310 	and.w	r3, r3, #16
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b8 	beq.w	8000b0a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d170      	bne.n	8000a82 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <HAL_RCC_OscConfig+0x218>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e21a      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a1a      	ldr	r2, [r3, #32]
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d921      	bls.n	8000a0c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fbd5 	bl	800117c <RCC_SetFlashLatencyFromMSIRange>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e208      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	4906      	ldr	r1, [pc, #24]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80009ea:	4313      	orrs	r3, r2
 80009ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	061b      	lsls	r3, r3, #24
 80009fc:	4901      	ldr	r1, [pc, #4]	; (8000a04 <HAL_RCC_OscConfig+0x264>)
 80009fe:	4313      	orrs	r3, r2
 8000a00:	604b      	str	r3, [r1, #4]
 8000a02:	e020      	b.n	8000a46 <HAL_RCC_OscConfig+0x2a6>
 8000a04:	40023800 	.word	0x40023800
 8000a08:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a0c:	4ba4      	ldr	r3, [pc, #656]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	49a1      	ldr	r1, [pc, #644]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a1e:	4ba0      	ldr	r3, [pc, #640]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	061b      	lsls	r3, r3, #24
 8000a2c:	499c      	ldr	r1, [pc, #624]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fba0 	bl	800117c <RCC_SetFlashLatencyFromMSIRange>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e1d3      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	0b5b      	lsrs	r3, r3, #13
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a56:	4a92      	ldr	r2, [pc, #584]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000a58:	6892      	ldr	r2, [r2, #8]
 8000a5a:	0912      	lsrs	r2, r2, #4
 8000a5c:	f002 020f 	and.w	r2, r2, #15
 8000a60:	4990      	ldr	r1, [pc, #576]	; (8000ca4 <HAL_RCC_OscConfig+0x504>)
 8000a62:	5c8a      	ldrb	r2, [r1, r2]
 8000a64:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a66:	4a90      	ldr	r2, [pc, #576]	; (8000ca8 <HAL_RCC_OscConfig+0x508>)
 8000a68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a6a:	4b90      	ldr	r3, [pc, #576]	; (8000cac <HAL_RCC_OscConfig+0x50c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fba4 	bl	80001bc <HAL_InitTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d045      	beq.n	8000b0a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	e1b5      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d029      	beq.n	8000ade <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000a8a:	4b89      	ldr	r3, [pc, #548]	; (8000cb0 <HAL_RCC_OscConfig+0x510>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a90:	f7ff fbe0 	bl	8000254 <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a96:	e008      	b.n	8000aaa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a98:	f7ff fbdc 	bl	8000254 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d901      	bls.n	8000aaa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e1a1      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000aaa:	4b7d      	ldr	r3, [pc, #500]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f0      	beq.n	8000a98 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ab6:	4b7a      	ldr	r3, [pc, #488]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	4977      	ldr	r1, [pc, #476]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ac8:	4b75      	ldr	r3, [pc, #468]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	061b      	lsls	r3, r3, #24
 8000ad6:	4972      	ldr	r1, [pc, #456]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
 8000adc:	e015      	b.n	8000b0a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ade:	4b74      	ldr	r3, [pc, #464]	; (8000cb0 <HAL_RCC_OscConfig+0x510>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fbb6 	bl	8000254 <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000aec:	f7ff fbb2 	bl	8000254 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d901      	bls.n	8000afe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e177      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000afe:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f0      	bne.n	8000aec <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d030      	beq.n	8000b78 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d016      	beq.n	8000b4c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b1e:	4b65      	ldr	r3, [pc, #404]	; (8000cb4 <HAL_RCC_OscConfig+0x514>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b24:	f7ff fb96 	bl	8000254 <HAL_GetTick>
 8000b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b2a:	e008      	b.n	8000b3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b2c:	f7ff fb92 	bl	8000254 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d901      	bls.n	8000b3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e157      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b3e:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f0      	beq.n	8000b2c <HAL_RCC_OscConfig+0x38c>
 8000b4a:	e015      	b.n	8000b78 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b4c:	4b59      	ldr	r3, [pc, #356]	; (8000cb4 <HAL_RCC_OscConfig+0x514>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b52:	f7ff fb7f 	bl	8000254 <HAL_GetTick>
 8000b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b58:	e008      	b.n	8000b6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b5a:	f7ff fb7b 	bl	8000254 <HAL_GetTick>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d901      	bls.n	8000b6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e140      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1f0      	bne.n	8000b5a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 80b5 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b8a:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10d      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	4a41      	ldr	r2, [pc, #260]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bb2:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <HAL_RCC_OscConfig+0x518>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d118      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bbe:	4b3e      	ldr	r3, [pc, #248]	; (8000cb8 <HAL_RCC_OscConfig+0x518>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <HAL_RCC_OscConfig+0x518>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bca:	f7ff fb43 	bl	8000254 <HAL_GetTick>
 8000bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bd2:	f7ff fb3f 	bl	8000254 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b64      	cmp	r3, #100	; 0x64
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e104      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be4:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <HAL_RCC_OscConfig+0x518>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f0      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <HAL_RCC_OscConfig+0x466>
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6353      	str	r3, [r2, #52]	; 0x34
 8000c04:	e02d      	b.n	8000c62 <HAL_RCC_OscConfig+0x4c2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x488>
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c18:	6353      	str	r3, [r2, #52]	; 0x34
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c24:	6353      	str	r3, [r2, #52]	; 0x34
 8000c26:	e01c      	b.n	8000c62 <HAL_RCC_OscConfig+0x4c2>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d10c      	bne.n	8000c4a <HAL_RCC_OscConfig+0x4aa>
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6353      	str	r3, [r2, #52]	; 0x34
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6353      	str	r3, [r2, #52]	; 0x34
 8000c48:	e00b      	b.n	8000c62 <HAL_RCC_OscConfig+0x4c2>
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c54:	6353      	str	r3, [r2, #52]	; 0x34
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c60:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d015      	beq.n	8000c96 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6a:	f7ff faf3 	bl	8000254 <HAL_GetTick>
 8000c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c70:	e00a      	b.n	8000c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c72:	f7ff faef 	bl	8000254 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e0b2      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_RCC_OscConfig+0x500>)
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0ee      	beq.n	8000c72 <HAL_RCC_OscConfig+0x4d2>
 8000c94:	e023      	b.n	8000cde <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c96:	f7ff fadd 	bl	8000254 <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000c9c:	e019      	b.n	8000cd2 <HAL_RCC_OscConfig+0x532>
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	08003308 	.word	0x08003308
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	42470020 	.word	0x42470020
 8000cb4:	42470680 	.word	0x42470680
 8000cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cbc:	f7ff faca 	bl	8000254 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e08d      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1ee      	bne.n	8000cbc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000cde:	7ffb      	ldrb	r3, [r7, #31]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d105      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce4:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	4a43      	ldr	r2, [pc, #268]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cee:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d079      	beq.n	8000dec <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2b0c      	cmp	r3, #12
 8000cfc:	d056      	beq.n	8000dac <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d13b      	bne.n	8000d7e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <HAL_RCC_OscConfig+0x65c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff faa2 	bl	8000254 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d14:	f7ff fa9e 	bl	8000254 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e063      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d26:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d32:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	4319      	orrs	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	492b      	ldr	r1, [pc, #172]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_RCC_OscConfig+0x65c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fa7d 	bl	8000254 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d5e:	f7ff fa79 	bl	8000254 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e03e      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x5be>
 8000d7c:	e036      	b.n	8000dec <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <HAL_RCC_OscConfig+0x65c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fa66 	bl	8000254 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8c:	f7ff fa62 	bl	8000254 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e027      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x5ec>
 8000daa:	e01f      	b.n	8000dec <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e01a      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d10d      	bne.n	8000de8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d106      	bne.n	8000de8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d001      	beq.n	8000dec <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	42470060 	.word	0x42470060

08000e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e11a      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e14:	4b8f      	ldr	r3, [pc, #572]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d919      	bls.n	8000e56 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_RCC_ClockConfig+0x34>
 8000e28:	4b8a      	ldr	r3, [pc, #552]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a89      	ldr	r2, [pc, #548]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b87      	ldr	r3, [pc, #540]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 0201 	bic.w	r2, r3, #1
 8000e3c:	4985      	ldr	r1, [pc, #532]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e44:	4b83      	ldr	r3, [pc, #524]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0f9      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e62:	4b7d      	ldr	r3, [pc, #500]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	497a      	ldr	r1, [pc, #488]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 808e 	beq.w	8000f9e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d107      	bne.n	8000e9a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e8a:	4b73      	ldr	r3, [pc, #460]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d121      	bne.n	8000eda <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e0d7      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d107      	bne.n	8000eb2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ea2:	4b6d      	ldr	r3, [pc, #436]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d115      	bne.n	8000eda <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e0cb      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eba:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0bf      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eca:	4b63      	ldr	r3, [pc, #396]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e0b7      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f023 0203 	bic.w	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	495c      	ldr	r1, [pc, #368]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000eec:	f7ff f9b2 	bl	8000254 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d112      	bne.n	8000f20 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efa:	e00a      	b.n	8000f12 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000efc:	f7ff f9aa 	bl	8000254 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e09b      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f12:	4b51      	ldr	r3, [pc, #324]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d1ee      	bne.n	8000efc <HAL_RCC_ClockConfig+0xfc>
 8000f1e:	e03e      	b.n	8000f9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d112      	bne.n	8000f4e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2a:	f7ff f993 	bl	8000254 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e084      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f40:	4b45      	ldr	r3, [pc, #276]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d1ee      	bne.n	8000f2a <HAL_RCC_ClockConfig+0x12a>
 8000f4c:	e027      	b.n	8000f9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d11d      	bne.n	8000f92 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f58:	f7ff f97c 	bl	8000254 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e06d      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d1ee      	bne.n	8000f58 <HAL_RCC_ClockConfig+0x158>
 8000f7a:	e010      	b.n	8000f9e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f7c:	f7ff f96a 	bl	8000254 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e05b      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1ee      	bne.n	8000f7c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d219      	bcs.n	8000fe0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <HAL_RCC_ClockConfig+0x1be>
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a27      	ldr	r2, [pc, #156]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0201 	bic.w	r2, r3, #1
 8000fc6:	4923      	ldr	r1, [pc, #140]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_RCC_ClockConfig+0x254>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e034      	b.n	800104a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d008      	beq.n	8000ffe <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4917      	ldr	r1, [pc, #92]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d009      	beq.n	800101e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	490f      	ldr	r1, [pc, #60]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 800101a:	4313      	orrs	r3, r2
 800101c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800101e:	f000 f823 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 8001022:	4601      	mov	r1, r0
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_RCC_ClockConfig+0x258>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_RCC_ClockConfig+0x25c>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	fa21 f303 	lsr.w	r3, r1, r3
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_RCC_ClockConfig+0x260>)
 8001038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_RCC_ClockConfig+0x264>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8bc 	bl	80001bc <HAL_InitTick>
 8001044:	4603      	mov	r3, r0
 8001046:	72fb      	strb	r3, [r7, #11]

  return status;
 8001048:	7afb      	ldrb	r3, [r7, #11]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00
 8001058:	40023800 	.word	0x40023800
 800105c:	08003308 	.word	0x08003308
 8001060:	20000008 	.word	0x20000008
 8001064:	20000000 	.word	0x20000000

08001068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b08      	cmp	r3, #8
 800107c:	d006      	beq.n	800108c <HAL_RCC_GetSysClockFreq+0x24>
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d007      	beq.n	8001092 <HAL_RCC_GetSysClockFreq+0x2a>
 8001082:	2b04      	cmp	r3, #4
 8001084:	d12c      	bne.n	80010e0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001088:	613b      	str	r3, [r7, #16]
      break;
 800108a:	e037      	b.n	80010fc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_RCC_GetSysClockFreq+0xa8>)
 800108e:	613b      	str	r3, [r7, #16]
      break;
 8001090:	e034      	b.n	80010fc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_RCC_GetSysClockFreq+0xac>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	0d9b      	lsrs	r3, r3, #22
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	3301      	adds	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_RCC_GetSysClockFreq+0xa0>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_RCC_GetSysClockFreq+0xa8>)
 80010bc:	fb02 f203 	mul.w	r2, r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e007      	b.n	80010da <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_RCC_GetSysClockFreq+0xa4>)
 80010ce:	fb02 f203 	mul.w	r2, r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	613b      	str	r3, [r7, #16]
      break;
 80010de:	e00d      	b.n	80010fc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_RCC_GetSysClockFreq+0xa0>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	0b5b      	lsrs	r3, r3, #13
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	613b      	str	r3, [r7, #16]
      break;
 80010fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010fc:	693b      	ldr	r3, [r7, #16]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40023800 	.word	0x40023800
 800110c:	00f42400 	.word	0x00f42400
 8001110:	016e3600 	.word	0x016e3600
 8001114:	080032fc 	.word	0x080032fc

08001118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <HAL_RCC_GetHCLKFreq+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000008 	.word	0x20000008

0800112c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001130:	f7ff fff2 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 8001134:	4601      	mov	r1, r0
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	08003318 	.word	0x08003318

08001154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001158:	f7ff ffde 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 800115c:	4601      	mov	r1, r0
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	0adb      	lsrs	r3, r3, #11
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001170:	4618      	mov	r0, r3
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	08003318 	.word	0x08003318

0800117c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12c      	bne.n	80011ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e016      	b.n	80011da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b6:	6253      	str	r3, [r2, #36]	; 0x24
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80011cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80011d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80011e0:	d105      	bne.n	80011ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80011e8:	d101      	bne.n	80011ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 0201 	bic.w	r2, r3, #1
 8001208:	490b      	ldr	r1, [pc, #44]	; (8001238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	429a      	cmp	r2, r3
 800121c:	d001      	beq.n	8001222 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000
 8001238:	40023c00 	.word	0x40023c00

0800123c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e04b      	b.n	80012e6 <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d106      	bne.n	800126e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 fab1 	bl	80027d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2202      	movs	r2, #2
 8001272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001284:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	ea42 0103 	orr.w	r1, r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	0c1a      	lsrs	r2, r3, #16
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f002 0204 	and.w	r2, r2, #4
 80012d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_SPI_Transmit+0x22>
 800130c:	2302      	movs	r3, #2
 800130e:	e11e      	b.n	800154e <HAL_SPI_Transmit+0x260>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001318:	f7fe ff9c 	bl	8000254 <HAL_GetTick>
 800131c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d002      	beq.n	8001334 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800132e:	2302      	movs	r3, #2
 8001330:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001332:	e103      	b.n	800153c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_SPI_Transmit+0x52>
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001344:	e0fa      	b.n	800153c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	88fa      	ldrh	r2, [r7, #6]
 8001364:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800138c:	d107      	bne.n	800139e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d007      	beq.n	80013bc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013c4:	d14b      	bne.n	800145e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <HAL_SPI_Transmit+0xe6>
 80013ce:	8afb      	ldrh	r3, [r7, #22]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d13e      	bne.n	8001452 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	1c9a      	adds	r2, r3, #2
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80013f8:	e02b      	b.n	8001452 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b02      	cmp	r3, #2
 8001406:	d112      	bne.n	800142e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	1c9a      	adds	r2, r3, #2
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	86da      	strh	r2, [r3, #54]	; 0x36
 800142c:	e011      	b.n	8001452 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800142e:	f7fe ff11 	bl	8000254 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d803      	bhi.n	8001446 <HAL_SPI_Transmit+0x158>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d102      	bne.n	800144c <HAL_SPI_Transmit+0x15e>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001450:	e074      	b.n	800153c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001456:	b29b      	uxth	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ce      	bne.n	80013fa <HAL_SPI_Transmit+0x10c>
 800145c:	e04c      	b.n	80014f8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_SPI_Transmit+0x17e>
 8001466:	8afb      	ldrh	r3, [r7, #22]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d140      	bne.n	80014ee <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	330c      	adds	r3, #12
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001492:	e02c      	b.n	80014ee <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d113      	bne.n	80014ca <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	330c      	adds	r3, #12
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80014c8:	e011      	b.n	80014ee <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014ca:	f7fe fec3 	bl	8000254 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d803      	bhi.n	80014e2 <HAL_SPI_Transmit+0x1f4>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e0:	d102      	bne.n	80014e8 <HAL_SPI_Transmit+0x1fa>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80014ec:	e026      	b.n	800153c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1cd      	bne.n	8001494 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fba4 	bl	8001c4a <SPI_EndRxTxTransaction>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10a      	bne.n	800152c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	77fb      	strb	r3, [r7, #31]
 8001538:	e000      	b.n	800153c <HAL_SPI_Transmit+0x24e>
  }

error:
 800153a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800154c:	7ffb      	ldrb	r3, [r7, #31]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b088      	sub	sp, #32
 800155a:	af02      	add	r7, sp, #8
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4613      	mov	r3, r2
 8001564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001572:	d112      	bne.n	800159a <HAL_SPI_Receive+0x44>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10e      	bne.n	800159a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2204      	movs	r2, #4
 8001580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4613      	mov	r3, r2
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f8e9 	bl	8001768 <HAL_SPI_TransmitReceive>
 8001596:	4603      	mov	r3, r0
 8001598:	e0e2      	b.n	8001760 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_SPI_Receive+0x52>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e0db      	b.n	8001760 <HAL_SPI_Receive+0x20a>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015b0:	f7fe fe50 	bl	8000254 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d002      	beq.n	80015c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80015c6:	e0c2      	b.n	800174e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_SPI_Receive+0x7e>
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80015d8:	e0b9      	b.n	800174e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2204      	movs	r2, #4
 80015de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001620:	d107      	bne.n	8001632 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d007      	beq.n	8001650 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d162      	bne.n	800171e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001658:	e02e      	b.n	80016b8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d115      	bne.n	8001694 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f103 020c 	add.w	r2, r3, #12
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001692:	e011      	b.n	80016b8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001694:	f7fe fdde 	bl	8000254 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d803      	bhi.n	80016ac <HAL_SPI_Receive+0x156>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016aa:	d102      	bne.n	80016b2 <HAL_SPI_Receive+0x15c>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80016b6:	e04a      	b.n	800174e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1cb      	bne.n	800165a <HAL_SPI_Receive+0x104>
 80016c2:	e031      	b.n	8001728 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d113      	bne.n	80016fa <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	b292      	uxth	r2, r2
 80016de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	1c9a      	adds	r2, r3, #2
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80016f8:	e011      	b.n	800171e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80016fa:	f7fe fdab 	bl	8000254 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d803      	bhi.n	8001712 <HAL_SPI_Receive+0x1bc>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001710:	d102      	bne.n	8001718 <HAL_SPI_Receive+0x1c2>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800171c:	e017      	b.n	800174e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001722:	b29b      	uxth	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1cd      	bne.n	80016c4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fa27 	bl	8001b80 <SPI_EndRxTransaction>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2220      	movs	r2, #32
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
 800174a:	e000      	b.n	800174e <HAL_SPI_Receive+0x1f8>
  }

error :
 800174c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_SPI_TransmitReceive+0x26>
 800178a:	2302      	movs	r3, #2
 800178c:	e18a      	b.n	8001aa4 <HAL_SPI_TransmitReceive+0x33c>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001796:	f7fe fd5d 	bl	8000254 <HAL_GetTick>
 800179a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80017b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d00f      	beq.n	80017d8 <HAL_SPI_TransmitReceive+0x70>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017be:	d107      	bne.n	80017d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_SPI_TransmitReceive+0x68>
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d003      	beq.n	80017d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80017d6:	e15b      	b.n	8001a90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_SPI_TransmitReceive+0x82>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_SPI_TransmitReceive+0x82>
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80017f0:	e14e      	b.n	8001a90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d003      	beq.n	8001806 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2205      	movs	r2, #5
 8001802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	887a      	ldrh	r2, [r7, #2]
 800182e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d007      	beq.n	800185a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001862:	d178      	bne.n	8001956 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_SPI_TransmitReceive+0x10a>
 800186c:	8b7b      	ldrh	r3, [r7, #26]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d166      	bne.n	8001940 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	881a      	ldrh	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	1c9a      	adds	r2, r3, #2
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001896:	e053      	b.n	8001940 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d11b      	bne.n	80018de <HAL_SPI_TransmitReceive+0x176>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d016      	beq.n	80018de <HAL_SPI_TransmitReceive+0x176>
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d113      	bne.n	80018de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	1c9a      	adds	r2, r3, #2
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d119      	bne.n	8001920 <HAL_SPI_TransmitReceive+0x1b8>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d014      	beq.n	8001920 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	b292      	uxth	r2, r2
 8001902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	1c9a      	adds	r2, r3, #2
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800191c:	2301      	movs	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001920:	f7fe fc98 	bl	8000254 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800192c:	429a      	cmp	r2, r3
 800192e:	d807      	bhi.n	8001940 <HAL_SPI_TransmitReceive+0x1d8>
 8001930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001936:	d003      	beq.n	8001940 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800193e:	e0a7      	b.n	8001a90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1a6      	bne.n	8001898 <HAL_SPI_TransmitReceive+0x130>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1a1      	bne.n	8001898 <HAL_SPI_TransmitReceive+0x130>
 8001954:	e07c      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_SPI_TransmitReceive+0x1fc>
 800195e:	8b7b      	ldrh	r3, [r7, #26]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d16b      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	330c      	adds	r3, #12
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800198a:	e057      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d11c      	bne.n	80019d4 <HAL_SPI_TransmitReceive+0x26c>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d017      	beq.n	80019d4 <HAL_SPI_TransmitReceive+0x26c>
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d114      	bne.n	80019d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	330c      	adds	r3, #12
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d119      	bne.n	8001a16 <HAL_SPI_TransmitReceive+0x2ae>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d014      	beq.n	8001a16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a12:	2301      	movs	r3, #1
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a16:	f7fe fc1d 	bl	8000254 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d803      	bhi.n	8001a2e <HAL_SPI_TransmitReceive+0x2c6>
 8001a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a2c:	d102      	bne.n	8001a34 <HAL_SPI_TransmitReceive+0x2cc>
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001a3a:	e029      	b.n	8001a90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1a2      	bne.n	800198c <HAL_SPI_TransmitReceive+0x224>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d19d      	bne.n	800198c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8f8 	bl	8001c4a <SPI_EndRxTxTransaction>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001a6c:	e010      	b.n	8001a90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10b      	bne.n	8001a8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	e000      	b.n	8001a90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001abc:	e04c      	b.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac4:	d048      	beq.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ac6:	f7fe fbc5 	bl	8000254 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d902      	bls.n	8001adc <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d13d      	bne.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001aea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001af4:	d111      	bne.n	8001b1a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afe:	d004      	beq.n	8001b0a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d107      	bne.n	8001b1a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b22:	d10f      	bne.n	8001b44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e00f      	b.n	8001b78 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4013      	ands	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d1a3      	bne.n	8001abe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b94:	d111      	bne.n	8001bba <SPI_EndRxTransaction+0x3a>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9e:	d004      	beq.n	8001baa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d107      	bne.n	8001bba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bc2:	d12a      	bne.n	8001c1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d012      	beq.n	8001bf4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff ff67 	bl	8001aac <SPI_WaitFlagStateUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d02d      	beq.n	8001c40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e026      	b.n	8001c42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff ff54 	bl	8001aac <SPI_WaitFlagStateUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01a      	beq.n	8001c40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f043 0220 	orr.w	r2, r3, #32
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e013      	b.n	8001c42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2101      	movs	r1, #1
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff ff41 	bl	8001aac <SPI_WaitFlagStateUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c5e:	d112      	bne.n	8001c86 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff ff1e 	bl	8001aac <SPI_WaitFlagStateUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f043 0220 	orr.w	r2, r3, #32
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e019      	b.n	8001cba <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d112      	bne.n	8001cb8 <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff ff05 	bl	8001aac <SPI_WaitFlagStateUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0220 	orr.w	r2, r3, #32
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e000      	b.n	8001cba <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e03f      	b.n	8001d54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fdb5 	bl	8002858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2224      	movs	r2, #36	; 0x24
 8001cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f90c 	bl	8001f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	f040 8083 	bne.w	8001e84 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_UART_Transmit+0x2e>
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07b      	b.n	8001e86 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_UART_Transmit+0x40>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e074      	b.n	8001e86 <HAL_UART_Transmit+0x12a>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2221      	movs	r2, #33	; 0x21
 8001dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001db2:	f7fe fa4f 	bl	8000254 <HAL_GetTick>
 8001db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	88fa      	ldrh	r2, [r7, #6]
 8001dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dc4:	e042      	b.n	8001e4c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ddc:	d122      	bne.n	8001e24 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f850 	bl	8001e8e <UART_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e046      	b.n	8001e86 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e0a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	3302      	adds	r3, #2
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	e017      	b.n	8001e4c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	e013      	b.n	8001e4c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f82d 	bl	8001e8e <UART_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e023      	b.n	8001e86 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	60ba      	str	r2, [r7, #8]
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1b7      	bne.n	8001dc6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f814 	bl	8001e8e <UART_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e00a      	b.n	8001e86 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e9e:	e02c      	b.n	8001efa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea6:	d028      	beq.n	8001efa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8001eae:	f7fe f9d1 	bl	8000254 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d21d      	bcs.n	8001efa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ecc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e00f      	b.n	8001f1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4013      	ands	r3, r2
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d0c3      	beq.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f64:	f023 030c 	bic.w	r3, r3, #12
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f90:	f040 80a5 	bne.w	80020de <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4aa4      	ldr	r2, [pc, #656]	; (800222c <UART_SetConfig+0x308>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d14f      	bne.n	800203e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f9e:	f7ff f8d9 	bl	8001154 <HAL_RCC_GetPCLK2Freq>
 8001fa2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009a      	lsls	r2, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4a9d      	ldr	r2, [pc, #628]	; (8002230 <UART_SetConfig+0x30c>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	0119      	lsls	r1, r3, #4
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009a      	lsls	r2, r3, #2
 8001fce:	441a      	add	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fda:	4b95      	ldr	r3, [pc, #596]	; (8002230 <UART_SetConfig+0x30c>)
 8001fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	2064      	movs	r0, #100	; 0x64
 8001fe4:	fb00 f303 	mul.w	r3, r0, r3
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	3332      	adds	r3, #50	; 0x32
 8001fee:	4a90      	ldr	r2, [pc, #576]	; (8002230 <UART_SetConfig+0x30c>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ffc:	4419      	add	r1, r3
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009a      	lsls	r2, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fbb2 f2f3 	udiv	r2, r2, r3
 8002014:	4b86      	ldr	r3, [pc, #536]	; (8002230 <UART_SetConfig+0x30c>)
 8002016:	fba3 0302 	umull	r0, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	fb00 f303 	mul.w	r3, r0, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	3332      	adds	r3, #50	; 0x32
 8002028:	4a81      	ldr	r2, [pc, #516]	; (8002230 <UART_SetConfig+0x30c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	f003 0207 	and.w	r2, r3, #7
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	440a      	add	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800203c:	e0f1      	b.n	8002222 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800203e:	f7ff f875 	bl	800112c <HAL_RCC_GetPCLK1Freq>
 8002042:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009a      	lsls	r2, r3, #2
 800204e:	441a      	add	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4a75      	ldr	r2, [pc, #468]	; (8002230 <UART_SetConfig+0x30c>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	0119      	lsls	r1, r3, #4
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	009a      	lsls	r2, r3, #2
 800206e:	441a      	add	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb2 f2f3 	udiv	r2, r2, r3
 800207a:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <UART_SetConfig+0x30c>)
 800207c:	fba3 0302 	umull	r0, r3, r3, r2
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	2064      	movs	r0, #100	; 0x64
 8002084:	fb00 f303 	mul.w	r3, r0, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	3332      	adds	r3, #50	; 0x32
 800208e:	4a68      	ldr	r2, [pc, #416]	; (8002230 <UART_SetConfig+0x30c>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800209c:	4419      	add	r1, r3
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009a      	lsls	r2, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b4:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <UART_SetConfig+0x30c>)
 80020b6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	3332      	adds	r3, #50	; 0x32
 80020c8:	4a59      	ldr	r2, [pc, #356]	; (8002230 <UART_SetConfig+0x30c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	440a      	add	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
}
 80020dc:	e0a1      	b.n	8002222 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a52      	ldr	r2, [pc, #328]	; (800222c <UART_SetConfig+0x308>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d14e      	bne.n	8002186 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80020e8:	f7ff f834 	bl	8001154 <HAL_RCC_GetPCLK2Freq>
 80020ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <UART_SetConfig+0x30c>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	0119      	lsls	r1, r3, #4
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009a      	lsls	r2, r3, #2
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fbb2 f2f3 	udiv	r2, r2, r3
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <UART_SetConfig+0x30c>)
 8002126:	fba3 0302 	umull	r0, r3, r3, r2
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2064      	movs	r0, #100	; 0x64
 800212e:	fb00 f303 	mul.w	r3, r0, r3
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	3332      	adds	r3, #50	; 0x32
 8002138:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <UART_SetConfig+0x30c>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002144:	4419      	add	r1, r3
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb2 f2f3 	udiv	r2, r2, r3
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <UART_SetConfig+0x30c>)
 800215e:	fba3 0302 	umull	r0, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2064      	movs	r0, #100	; 0x64
 8002166:	fb00 f303 	mul.w	r3, r0, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	3332      	adds	r3, #50	; 0x32
 8002170:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <UART_SetConfig+0x30c>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	440a      	add	r2, r1
 8002182:	609a      	str	r2, [r3, #8]
}
 8002184:	e04d      	b.n	8002222 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002186:	f7fe ffd1 	bl	800112c <HAL_RCC_GetPCLK1Freq>
 800218a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	009a      	lsls	r2, r3, #2
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4a23      	ldr	r2, [pc, #140]	; (8002230 <UART_SetConfig+0x30c>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	0119      	lsls	r1, r3, #4
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009a      	lsls	r2, r3, #2
 80021b6:	441a      	add	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <UART_SetConfig+0x30c>)
 80021c4:	fba3 0302 	umull	r0, r3, r3, r2
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	2064      	movs	r0, #100	; 0x64
 80021cc:	fb00 f303 	mul.w	r3, r0, r3
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	3332      	adds	r3, #50	; 0x32
 80021d6:	4a16      	ldr	r2, [pc, #88]	; (8002230 <UART_SetConfig+0x30c>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e2:	4419      	add	r1, r3
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009a      	lsls	r2, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <UART_SetConfig+0x30c>)
 80021fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	fb00 f303 	mul.w	r3, r0, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	3332      	adds	r3, #50	; 0x32
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <UART_SetConfig+0x30c>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	f003 020f 	and.w	r2, r3, #15
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	440a      	add	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40013800 	.word	0x40013800
 8002230:	51eb851f 	.word	0x51eb851f

08002234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b094      	sub	sp, #80	; 0x50
 8002238:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800223a:	f7fd ffa7 	bl	800018c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800223e:	f000 f9ad 	bl	800259c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002242:	f000 fa53 	bl	80026ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8002246:	f000 f9f1 	bl	800262c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800224a:	f000 fa25 	bl	8002698 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_Delay(1000);
 800224e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002252:	f7fe f809 	bl	8000268 <HAL_Delay>


	uint8_t acc[10]={0,0,0,0,0,0,0,0,0,0};
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	811a      	strh	r2, [r3, #8]
	uint8_t octet_read=0;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t data[3];
	uint8_t data_fifo[2];


	 uint16_t vlx=0;
 8002268:	2300      	movs	r3, #0
 800226a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	 uint16_t vhx=0;
 800226e:	2300      	movs	r3, #0
 8002270:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	 uint16_t valx =0;
 8002274:	2300      	movs	r3, #0
 8002276:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	 int16_t valx2 =0;
 800227a:	2300      	movs	r3, #0
 800227c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	 uint16_t vly=0;
 8002280:	2300      	movs	r3, #0
 8002282:	87fb      	strh	r3, [r7, #62]	; 0x3e
	 uint16_t vhy=0;
 8002284:	2300      	movs	r3, #0
 8002286:	87bb      	strh	r3, [r7, #60]	; 0x3c
	 uint16_t valy =0;
 8002288:	2300      	movs	r3, #0
 800228a:	877b      	strh	r3, [r7, #58]	; 0x3a
	 int16_t valy2 =0;
 800228c:	2300      	movs	r3, #0
 800228e:	873b      	strh	r3, [r7, #56]	; 0x38
	 uint16_t vlz=0;
 8002290:	2300      	movs	r3, #0
 8002292:	86fb      	strh	r3, [r7, #54]	; 0x36
	 uint16_t vhz=0;
 8002294:	2300      	movs	r3, #0
 8002296:	86bb      	strh	r3, [r7, #52]	; 0x34
	 uint16_t valz =0;
 8002298:	2300      	movs	r3, #0
 800229a:	867b      	strh	r3, [r7, #50]	; 0x32
	 int16_t valz2 =0;
 800229c:	2300      	movs	r3, #0
 800229e:	863b      	strh	r3, [r7, #48]	; 0x30

	/*Configuration capteur*/
	uint8_t fifo_ctrl = 0x2e;//0b101110
 80022a0:	232e      	movs	r3, #46	; 0x2e
 80022a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_fifo[0]=0b01101110; //écrit 1 octet
 80022a6:	236e      	movs	r3, #110	; 0x6e
 80022a8:	773b      	strb	r3, [r7, #28]

	 data_fifo[1]=0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	777b      	strb	r3, [r7, #29]
   	//Configure FIFO, bypass mode p41
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2110      	movs	r1, #16
 80022b2:	48b6      	ldr	r0, [pc, #728]	; (800258c <main+0x358>)
 80022b4:	f7fe fa5c 	bl	8000770 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data_fifo, 2, HAL_MAX_DELAY);
 80022b8:	f107 011c 	add.w	r1, r7, #28
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c0:	2202      	movs	r2, #2
 80022c2:	48b3      	ldr	r0, [pc, #716]	; (8002590 <main+0x35c>)
 80022c4:	f7ff f813 	bl	80012ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2110      	movs	r1, #16
 80022cc:	48af      	ldr	r0, [pc, #700]	; (800258c <main+0x358>)
 80022ce:	f7fe fa4f 	bl	8000770 <HAL_GPIO_WritePin>

	data_fifo[1]=64; //(64)10 = stream, (32)10 fifo
 80022d2:	2340      	movs	r3, #64	; 0x40
 80022d4:	777b      	strb	r3, [r7, #29]


	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2110      	movs	r1, #16
 80022da:	48ac      	ldr	r0, [pc, #688]	; (800258c <main+0x358>)
 80022dc:	f7fe fa48 	bl	8000770 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data_fifo, 2, HAL_MAX_DELAY);
 80022e0:	f107 011c 	add.w	r1, r7, #28
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022e8:	2202      	movs	r2, #2
 80022ea:	48a9      	ldr	r0, [pc, #676]	; (8002590 <main+0x35c>)
 80022ec:	f7fe ffff 	bl	80012ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2110      	movs	r1, #16
 80022f4:	48a5      	ldr	r0, [pc, #660]	; (800258c <main+0x358>)
 80022f6:	f7fe fa3b 	bl	8000770 <HAL_GPIO_WritePin>


	//Ecrire (0)10 dans CTRL0 ; 0b00011111, 0x1f : disable FIFO
	uint8_t data_ctrl0[2];
	data_ctrl0[0]=0b01011111;
 80022fa:	235f      	movs	r3, #95	; 0x5f
 80022fc:	763b      	strb	r3, [r7, #24]
	data_ctrl0[1]=0;
 80022fe:	2300      	movs	r3, #0
 8002300:	767b      	strb	r3, [r7, #25]


	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	2110      	movs	r1, #16
 8002306:	48a1      	ldr	r0, [pc, #644]	; (800258c <main+0x358>)
 8002308:	f7fe fa32 	bl	8000770 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data_ctrl0, 2, HAL_MAX_DELAY);
 800230c:	f107 0118 	add.w	r1, r7, #24
 8002310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002314:	2202      	movs	r2, #2
 8002316:	489e      	ldr	r0, [pc, #632]	; (8002590 <main+0x35c>)
 8002318:	f7fe ffe9 	bl	80012ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 800231c:	2201      	movs	r2, #1
 800231e:	2110      	movs	r1, #16
 8002320:	489a      	ldr	r0, [pc, #616]	; (800258c <main+0x358>)
 8002322:	f7fe fa25 	bl	8000770 <HAL_GPIO_WritePin>


	//Config ctrl1 0x20 : Acceleration data-rate 3.125Hz (23)10, 100Hz (103)10

	uint8_t tab1[2];
	tab1[0]=0b01100000;
 8002326:	2360      	movs	r3, #96	; 0x60
 8002328:	753b      	strb	r3, [r7, #20]
	tab1[1]=103;
 800232a:	2367      	movs	r3, #103	; 0x67
 800232c:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2110      	movs	r1, #16
 8002332:	4896      	ldr	r0, [pc, #600]	; (800258c <main+0x358>)
 8002334:	f7fe fa1c 	bl	8000770 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,tab1, 2, HAL_MAX_DELAY);
 8002338:	f107 0114 	add.w	r1, r7, #20
 800233c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002340:	2202      	movs	r2, #2
 8002342:	4893      	ldr	r0, [pc, #588]	; (8002590 <main+0x35c>)
 8002344:	f7fe ffd3 	bl	80012ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	2110      	movs	r1, #16
 800234c:	488f      	ldr	r0, [pc, #572]	; (800258c <main+0x358>)
 800234e:	f7fe fa0f 	bl	8000770 <HAL_GPIO_WritePin>




			//Lire OUT_Z_L_A (2ch),
			octet_read=0b10101100;
 8002352:	23ac      	movs	r3, #172	; 0xac
 8002354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	2110      	movs	r1, #16
 800235c:	488b      	ldr	r0, [pc, #556]	; (800258c <main+0x358>)
 800235e:	f7fe fa07 	bl	8000770 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&octet_read, 2, HAL_MAX_DELAY);
 8002362:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236a:	2202      	movs	r2, #2
 800236c:	4888      	ldr	r0, [pc, #544]	; (8002590 <main+0x35c>)
 800236e:	f7fe ffbe 	bl	80012ee <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, data, 1, HAL_MAX_DELAY);
 8002372:	f107 0120 	add.w	r1, r7, #32
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237a:	2201      	movs	r2, #1
 800237c:	4884      	ldr	r0, [pc, #528]	; (8002590 <main+0x35c>)
 800237e:	f7ff f8ea 	bl	8001556 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2110      	movs	r1, #16
 8002386:	4881      	ldr	r0, [pc, #516]	; (800258c <main+0x358>)
 8002388:	f7fe f9f2 	bl	8000770 <HAL_GPIO_WritePin>

			acc[0]=data[0];
 800238c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002390:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			//Lire OUT_Z_H_A (2dh),
			octet_read=0b10101101;
 8002394:	23ad      	movs	r3, #173	; 0xad
 8002396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2110      	movs	r1, #16
 800239e:	487b      	ldr	r0, [pc, #492]	; (800258c <main+0x358>)
 80023a0:	f7fe f9e6 	bl	8000770 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&octet_read, 2, HAL_MAX_DELAY);
 80023a4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ac:	2202      	movs	r2, #2
 80023ae:	4878      	ldr	r0, [pc, #480]	; (8002590 <main+0x35c>)
 80023b0:	f7fe ff9d 	bl	80012ee <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, data, 1, HAL_MAX_DELAY);
 80023b4:	f107 0120 	add.w	r1, r7, #32
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023bc:	2201      	movs	r2, #1
 80023be:	4874      	ldr	r0, [pc, #464]	; (8002590 <main+0x35c>)
 80023c0:	f7ff f8c9 	bl	8001556 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	2110      	movs	r1, #16
 80023c8:	4870      	ldr	r0, [pc, #448]	; (800258c <main+0x358>)
 80023ca:	f7fe f9d1 	bl	8000770 <HAL_GPIO_WritePin>

			acc[1]=data[0];
 80023ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25




			 vlz=acc[0];
 80023d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023da:	86fb      	strh	r3, [r7, #54]	; 0x36
			 vhz=acc[1];
 80023dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80023e0:	86bb      	strh	r3, [r7, #52]	; 0x34
			 valz = vlz | (vhz << 8);
 80023e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	867b      	strh	r3, [r7, #50]	; 0x32
			 valz2 = (valz & 0x8000) ? valz | 0xFFFF0000 : valz;
 80023f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80023f4:	863b      	strh	r3, [r7, #48]	; 0x30



			 //Lire OUT_Y_L_A (2ah),
			octet_read=0b10101010;
 80023f6:	23aa      	movs	r3, #170	; 0xaa
 80023f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2110      	movs	r1, #16
 8002400:	4862      	ldr	r0, [pc, #392]	; (800258c <main+0x358>)
 8002402:	f7fe f9b5 	bl	8000770 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&octet_read, 2, HAL_MAX_DELAY);
 8002406:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800240a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240e:	2202      	movs	r2, #2
 8002410:	485f      	ldr	r0, [pc, #380]	; (8002590 <main+0x35c>)
 8002412:	f7fe ff6c 	bl	80012ee <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, data, 1, HAL_MAX_DELAY);
 8002416:	f107 0120 	add.w	r1, r7, #32
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241e:	2201      	movs	r2, #1
 8002420:	485b      	ldr	r0, [pc, #364]	; (8002590 <main+0x35c>)
 8002422:	f7ff f898 	bl	8001556 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2110      	movs	r1, #16
 800242a:	4858      	ldr	r0, [pc, #352]	; (800258c <main+0x358>)
 800242c:	f7fe f9a0 	bl	8000770 <HAL_GPIO_WritePin>

			acc[0]=data[0];
 8002430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002434:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			//Lire OUT_Y_H_A (2bh),
			octet_read=0b10101011;
 8002438:	23ab      	movs	r3, #171	; 0xab
 800243a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	2110      	movs	r1, #16
 8002442:	4852      	ldr	r0, [pc, #328]	; (800258c <main+0x358>)
 8002444:	f7fe f994 	bl	8000770 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&octet_read, 2, HAL_MAX_DELAY);
 8002448:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800244c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002450:	2202      	movs	r2, #2
 8002452:	484f      	ldr	r0, [pc, #316]	; (8002590 <main+0x35c>)
 8002454:	f7fe ff4b 	bl	80012ee <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, data, 1, HAL_MAX_DELAY);
 8002458:	f107 0120 	add.w	r1, r7, #32
 800245c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002460:	2201      	movs	r2, #1
 8002462:	484b      	ldr	r0, [pc, #300]	; (8002590 <main+0x35c>)
 8002464:	f7ff f877 	bl	8001556 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 8002468:	2201      	movs	r2, #1
 800246a:	2110      	movs	r1, #16
 800246c:	4847      	ldr	r0, [pc, #284]	; (800258c <main+0x358>)
 800246e:	f7fe f97f 	bl	8000770 <HAL_GPIO_WritePin>

			acc[1]=data[0];
 8002472:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


			 vly=acc[0];
 800247a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800247e:	87fb      	strh	r3, [r7, #62]	; 0x3e
			 vhy=acc[1];
 8002480:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002484:	87bb      	strh	r3, [r7, #60]	; 0x3c
			 valy = vly | (vhy << 8);
 8002486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002490:	4313      	orrs	r3, r2
 8002492:	b21b      	sxth	r3, r3
 8002494:	877b      	strh	r3, [r7, #58]	; 0x3a
			 valy2 = (valy & 0x8000) ? valy | 0xFFFF0000 : valy;
 8002496:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002498:	873b      	strh	r3, [r7, #56]	; 0x38

			 //Lire OUT_X_L_A (28h)
			octet_read=0b10101000;
 800249a:	23a8      	movs	r3, #168	; 0xa8
 800249c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2110      	movs	r1, #16
 80024a4:	4839      	ldr	r0, [pc, #228]	; (800258c <main+0x358>)
 80024a6:	f7fe f963 	bl	8000770 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&octet_read, 1, HAL_MAX_DELAY);
 80024aa:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b2:	2201      	movs	r2, #1
 80024b4:	4836      	ldr	r0, [pc, #216]	; (8002590 <main+0x35c>)
 80024b6:	f7fe ff1a 	bl	80012ee <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, data, 1, HAL_MAX_DELAY);
 80024ba:	f107 0120 	add.w	r1, r7, #32
 80024be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c2:	2201      	movs	r2, #1
 80024c4:	4832      	ldr	r0, [pc, #200]	; (8002590 <main+0x35c>)
 80024c6:	f7ff f846 	bl	8001556 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2110      	movs	r1, #16
 80024ce:	482f      	ldr	r0, [pc, #188]	; (800258c <main+0x358>)
 80024d0:	f7fe f94e 	bl	8000770 <HAL_GPIO_WritePin>
			acc[0]=data[0];
 80024d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			//Lire OUT_X_H_A (29h)
			octet_read=0b10101001;
 80024dc:	23a9      	movs	r3, #169	; 0xa9
 80024de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2110      	movs	r1, #16
 80024e6:	4829      	ldr	r0, [pc, #164]	; (800258c <main+0x358>)
 80024e8:	f7fe f942 	bl	8000770 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&octet_read, 1, HAL_MAX_DELAY);
 80024ec:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f4:	2201      	movs	r2, #1
 80024f6:	4826      	ldr	r0, [pc, #152]	; (8002590 <main+0x35c>)
 80024f8:	f7fe fef9 	bl	80012ee <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, data, 1, HAL_MAX_DELAY);
 80024fc:	f107 0120 	add.w	r1, r7, #32
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002504:	2201      	movs	r2, #1
 8002506:	4822      	ldr	r0, [pc, #136]	; (8002590 <main+0x35c>)
 8002508:	f7ff f825 	bl	8001556 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 800250c:	2201      	movs	r2, #1
 800250e:	2110      	movs	r1, #16
 8002510:	481e      	ldr	r0, [pc, #120]	; (800258c <main+0x358>)
 8002512:	f7fe f92d 	bl	8000770 <HAL_GPIO_WritePin>

			acc[1]=data[0];
 8002516:	f897 3020 	ldrb.w	r3, [r7, #32]
 800251a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


			 vlx=acc[0];
 800251e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002522:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			 vhx=acc[1];
 8002526:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800252a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			 valx = vlx | (vhx << 8);
 800252e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	b21a      	sxth	r2, r3
 8002536:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800253a:	4313      	orrs	r3, r2
 800253c:	b21b      	sxth	r3, r3
 800253e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			 valx2 = (valx & 0x8000) ? valx | 0xFFFF0000 : valx;
 8002542:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002546:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40



			 uint8_t string_message[20];
			 sprintf(string_message,"X : %d, Y : %d, Z : %d \n\r", valx2,valy2,valz2);
 800254a:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800254e:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 8002552:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002556:	4638      	mov	r0, r7
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	460b      	mov	r3, r1
 800255c:	490d      	ldr	r1, [pc, #52]	; (8002594 <main+0x360>)
 800255e:	f000 faa1 	bl	8002aa4 <siprintf>
			 uint8_t len = strlen(string_message);
 8002562:	463b      	mov	r3, r7
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd fe09 	bl	800017c <strlen>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			 HAL_UART_Transmit(&huart1, string_message,len , HAL_MAX_DELAY);
 8002570:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002574:	b29a      	uxth	r2, r3
 8002576:	4639      	mov	r1, r7
 8002578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257c:	4806      	ldr	r0, [pc, #24]	; (8002598 <main+0x364>)
 800257e:	f7ff fbed 	bl	8001d5c <HAL_UART_Transmit>




	  		 HAL_Delay(1000);
 8002582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002586:	f7fd fe6f 	bl	8000268 <HAL_Delay>
  {
 800258a:	e6e2      	b.n	8002352 <main+0x11e>
 800258c:	40020000 	.word	0x40020000
 8002590:	200000dc 	.word	0x200000dc
 8002594:	080032e0 	.word	0x080032e0
 8002598:	2000009c 	.word	0x2000009c

0800259c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b092      	sub	sp, #72	; 0x48
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	2234      	movs	r2, #52	; 0x34
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fa72 	bl	8002a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b0:	463b      	mov	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <SystemClock_Config+0x8c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <SystemClock_Config+0x8c>)
 80025c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025cc:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025ce:	2310      	movs	r3, #16
 80025d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025d2:	2301      	movs	r3, #1
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80025da:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe f8d9 	bl	80007a0 <HAL_RCC_OscConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80025f4:	f000 f8b8 	bl	8002768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f8:	230f      	movs	r3, #15
 80025fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fbf5 	bl	8000e00 <HAL_RCC_ClockConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800261c:	f000 f8a4 	bl	8002768 <Error_Handler>
  }
}
 8002620:	bf00      	nop
 8002622:	3748      	adds	r7, #72	; 0x48
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40007000 	.word	0x40007000

0800262c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_SPI1_Init+0x64>)
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <MX_SPI1_Init+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <MX_SPI1_Init+0x64>)
 8002638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800263c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_SPI1_Init+0x64>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <MX_SPI1_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_SPI1_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_SPI1_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_SPI1_Init+0x64>)
 8002658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_SPI1_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <MX_SPI1_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_SPI1_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <MX_SPI1_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_SPI1_Init+0x64>)
 8002678:	220a      	movs	r2, #10
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <MX_SPI1_Init+0x64>)
 800267e:	f7fe fddd 	bl	800123c <HAL_SPI_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002688:	f000 f86e 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200000dc 	.word	0x200000dc
 8002694:	40013000 	.word	0x40013000

08002698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <MX_USART1_UART_Init+0x50>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026d0:	f7ff faf7 	bl	8001cc2 <HAL_UART_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026da:	f000 f845 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000009c 	.word	0x2000009c
 80026e8:	40013800 	.word	0x40013800

080026ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_GPIO_Init+0x74>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <MX_GPIO_Init+0x74>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	61d3      	str	r3, [r2, #28]
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_GPIO_Init+0x74>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_GPIO_Init+0x74>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a10      	ldr	r2, [pc, #64]	; (8002760 <MX_GPIO_Init+0x74>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_GPIO_Init+0x74>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	2110      	movs	r1, #16
 8002736:	480b      	ldr	r0, [pc, #44]	; (8002764 <MX_GPIO_Init+0x78>)
 8002738:	f7fe f81a 	bl	8000770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800273c:	2310      	movs	r3, #16
 800273e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4619      	mov	r1, r3
 8002752:	4804      	ldr	r0, [pc, #16]	; (8002764 <MX_GPIO_Init+0x78>)
 8002754:	f7fd fe8e 	bl	8000474 <HAL_GPIO_Init>

}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	40020000 	.word	0x40020000

08002768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_MspInit+0x58>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <HAL_MspInit+0x58>)
 8002780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002784:	6253      	str	r3, [r2, #36]	; 0x24
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_MspInit+0x58>)
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_MspInit+0x58>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_MspInit+0x58>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_MspInit+0x58>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_MspInit+0x58>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_MspInit+0x58>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6253      	str	r3, [r2, #36]	; 0x24
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_MspInit+0x58>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <HAL_SPI_MspInit+0x7c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d127      	bne.n	8002842 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_SPI_MspInit+0x80>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_SPI_MspInit+0x80>)
 80027f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_SPI_MspInit+0x80>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_SPI_MspInit+0x80>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_SPI_MspInit+0x80>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_SPI_MspInit+0x80>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002822:	23e0      	movs	r3, #224	; 0xe0
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002832:	2305      	movs	r3, #5
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <HAL_SPI_MspInit+0x84>)
 800283e:	f7fd fe19 	bl	8000474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40013000 	.word	0x40013000
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000

08002858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_UART_MspInit+0x7c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d127      	bne.n	80028ca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_UART_MspInit+0x80>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	61d3      	str	r3, [r2, #28]
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_UART_MspInit+0x80>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ba:	2307      	movs	r3, #7
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_UART_MspInit+0x84>)
 80028c6:	f7fd fdd5 	bl	8000474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020400 	.word	0x40020400

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <HardFault_Handler+0x4>

080028f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <MemManage_Handler+0x4>

080028f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <BusFault_Handler+0x4>

080028fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002902:	e7fe      	b.n	8002902 <UsageFault_Handler+0x4>

08002904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292c:	f7fd fc80 	bl	8000230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <_sbrk+0x50>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x16>
		heap_end = &end;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <_sbrk+0x50>)
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <_sbrk+0x54>)
 8002948:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <_sbrk+0x50>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <_sbrk+0x50>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	466a      	mov	r2, sp
 800295a:	4293      	cmp	r3, r2
 800295c:	d907      	bls.n	800296e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800295e:	f000 f86f 	bl	8002a40 <__errno>
 8002962:	4602      	mov	r2, r0
 8002964:	230c      	movs	r3, #12
 8002966:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800296c:	e006      	b.n	800297c <_sbrk+0x48>
	}

	heap_end += incr;
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <_sbrk+0x50>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <_sbrk+0x50>)
 8002978:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000008c 	.word	0x2000008c
 8002988:	20000138 	.word	0x20000138

0800298c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <SystemInit+0x5c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <SystemInit+0x5c>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <SystemInit+0x5c>)
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4911      	ldr	r1, [pc, #68]	; (80029e8 <SystemInit+0x5c>)
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <SystemInit+0x60>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <SystemInit+0x5c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <SystemInit+0x5c>)
 80029ae:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80029b2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80029b6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <SystemInit+0x5c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SystemInit+0x5c>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <SystemInit+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <SystemInit+0x5c>)
 80029ca:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80029ce:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SystemInit+0x5c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <SystemInit+0x64>)
 80029d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029dc:	609a      	str	r2, [r3, #8]
#endif
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	88ffc00c 	.word	0x88ffc00c
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029f6:	e003      	b.n	8002a00 <LoopCopyDataInit>

080029f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029fe:	3104      	adds	r1, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a00:	480a      	ldr	r0, [pc, #40]	; (8002a2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a08:	d3f6      	bcc.n	80029f8 <CopyDataInit>
  ldr r2, =_sbss
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a0c:	e002      	b.n	8002a14 <LoopFillZerobss>

08002a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a10:	f842 3b04 	str.w	r3, [r2], #4

08002a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a18:	d3f9      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a1a:	f7ff ffb7 	bl	800298c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1e:	f000 f815 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a22:	f7ff fc07 	bl	8002234 <main>
  bx lr
 8002a26:	4770      	bx	lr
  ldr r3, =_sidata
 8002a28:	0800335c 	.word	0x0800335c
  ldr r0, =_sdata
 8002a2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a30:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002a34:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002a38:	20000138 	.word	0x20000138

08002a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC1_IRQHandler>
	...

08002a40 <__errno>:
 8002a40:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <__errno+0x8>)
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2500      	movs	r5, #0
 8002a50:	4e0c      	ldr	r6, [pc, #48]	; (8002a84 <__libc_init_array+0x38>)
 8002a52:	4c0d      	ldr	r4, [pc, #52]	; (8002a88 <__libc_init_array+0x3c>)
 8002a54:	1ba4      	subs	r4, r4, r6
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	42a5      	cmp	r5, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	f000 fc34 	bl	80032c8 <_init>
 8002a60:	2500      	movs	r5, #0
 8002a62:	4e0a      	ldr	r6, [pc, #40]	; (8002a8c <__libc_init_array+0x40>)
 8002a64:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <__libc_init_array+0x44>)
 8002a66:	1ba4      	subs	r4, r4, r6
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	42a5      	cmp	r5, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a74:	4798      	blx	r3
 8002a76:	3501      	adds	r5, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a7e:	4798      	blx	r3
 8002a80:	3501      	adds	r5, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08003354 	.word	0x08003354
 8002a88:	08003354 	.word	0x08003354
 8002a8c:	08003354 	.word	0x08003354
 8002a90:	08003358 	.word	0x08003358

08002a94 <memset>:
 8002a94:	4603      	mov	r3, r0
 8002a96:	4402      	add	r2, r0
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <memset+0xa>
 8002a9c:	4770      	bx	lr
 8002a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa2:	e7f9      	b.n	8002a98 <memset+0x4>

08002aa4 <siprintf>:
 8002aa4:	b40e      	push	{r1, r2, r3}
 8002aa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aaa:	b500      	push	{lr}
 8002aac:	b09c      	sub	sp, #112	; 0x70
 8002aae:	ab1d      	add	r3, sp, #116	; 0x74
 8002ab0:	9002      	str	r0, [sp, #8]
 8002ab2:	9006      	str	r0, [sp, #24]
 8002ab4:	9107      	str	r1, [sp, #28]
 8002ab6:	9104      	str	r1, [sp, #16]
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <siprintf+0x38>)
 8002aba:	4909      	ldr	r1, [pc, #36]	; (8002ae0 <siprintf+0x3c>)
 8002abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac0:	9105      	str	r1, [sp, #20]
 8002ac2:	6800      	ldr	r0, [r0, #0]
 8002ac4:	a902      	add	r1, sp, #8
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	f000 f866 	bl	8002b98 <_svfiprintf_r>
 8002acc:	2200      	movs	r2, #0
 8002ace:	9b02      	ldr	r3, [sp, #8]
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	b01c      	add	sp, #112	; 0x70
 8002ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad8:	b003      	add	sp, #12
 8002ada:	4770      	bx	lr
 8002adc:	2000000c 	.word	0x2000000c
 8002ae0:	ffff0208 	.word	0xffff0208

08002ae4 <__ssputs_r>:
 8002ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae8:	688e      	ldr	r6, [r1, #8]
 8002aea:	4682      	mov	sl, r0
 8002aec:	429e      	cmp	r6, r3
 8002aee:	460c      	mov	r4, r1
 8002af0:	4690      	mov	r8, r2
 8002af2:	4699      	mov	r9, r3
 8002af4:	d837      	bhi.n	8002b66 <__ssputs_r+0x82>
 8002af6:	898a      	ldrh	r2, [r1, #12]
 8002af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002afc:	d031      	beq.n	8002b62 <__ssputs_r+0x7e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	6825      	ldr	r5, [r4, #0]
 8002b02:	6909      	ldr	r1, [r1, #16]
 8002b04:	1a6f      	subs	r7, r5, r1
 8002b06:	6965      	ldr	r5, [r4, #20]
 8002b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b10:	f109 0301 	add.w	r3, r9, #1
 8002b14:	443b      	add	r3, r7
 8002b16:	429d      	cmp	r5, r3
 8002b18:	bf38      	it	cc
 8002b1a:	461d      	movcc	r5, r3
 8002b1c:	0553      	lsls	r3, r2, #21
 8002b1e:	d530      	bpl.n	8002b82 <__ssputs_r+0x9e>
 8002b20:	4629      	mov	r1, r5
 8002b22:	f000 fb37 	bl	8003194 <_malloc_r>
 8002b26:	4606      	mov	r6, r0
 8002b28:	b950      	cbnz	r0, 8002b40 <__ssputs_r+0x5c>
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b30:	f8ca 3000 	str.w	r3, [sl]
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3a:	81a3      	strh	r3, [r4, #12]
 8002b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b40:	463a      	mov	r2, r7
 8002b42:	6921      	ldr	r1, [r4, #16]
 8002b44:	f000 fab6 	bl	80030b4 <memcpy>
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	6126      	str	r6, [r4, #16]
 8002b56:	443e      	add	r6, r7
 8002b58:	6026      	str	r6, [r4, #0]
 8002b5a:	464e      	mov	r6, r9
 8002b5c:	6165      	str	r5, [r4, #20]
 8002b5e:	1bed      	subs	r5, r5, r7
 8002b60:	60a5      	str	r5, [r4, #8]
 8002b62:	454e      	cmp	r6, r9
 8002b64:	d900      	bls.n	8002b68 <__ssputs_r+0x84>
 8002b66:	464e      	mov	r6, r9
 8002b68:	4632      	mov	r2, r6
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	6820      	ldr	r0, [r4, #0]
 8002b6e:	f000 faac 	bl	80030ca <memmove>
 8002b72:	68a3      	ldr	r3, [r4, #8]
 8002b74:	2000      	movs	r0, #0
 8002b76:	1b9b      	subs	r3, r3, r6
 8002b78:	60a3      	str	r3, [r4, #8]
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	441e      	add	r6, r3
 8002b7e:	6026      	str	r6, [r4, #0]
 8002b80:	e7dc      	b.n	8002b3c <__ssputs_r+0x58>
 8002b82:	462a      	mov	r2, r5
 8002b84:	f000 fb60 	bl	8003248 <_realloc_r>
 8002b88:	4606      	mov	r6, r0
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d1e2      	bne.n	8002b54 <__ssputs_r+0x70>
 8002b8e:	6921      	ldr	r1, [r4, #16]
 8002b90:	4650      	mov	r0, sl
 8002b92:	f000 fab3 	bl	80030fc <_free_r>
 8002b96:	e7c8      	b.n	8002b2a <__ssputs_r+0x46>

08002b98 <_svfiprintf_r>:
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9c:	461d      	mov	r5, r3
 8002b9e:	898b      	ldrh	r3, [r1, #12]
 8002ba0:	b09d      	sub	sp, #116	; 0x74
 8002ba2:	061f      	lsls	r7, r3, #24
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	4616      	mov	r6, r2
 8002baa:	d50f      	bpl.n	8002bcc <_svfiprintf_r+0x34>
 8002bac:	690b      	ldr	r3, [r1, #16]
 8002bae:	b96b      	cbnz	r3, 8002bcc <_svfiprintf_r+0x34>
 8002bb0:	2140      	movs	r1, #64	; 0x40
 8002bb2:	f000 faef 	bl	8003194 <_malloc_r>
 8002bb6:	6020      	str	r0, [r4, #0]
 8002bb8:	6120      	str	r0, [r4, #16]
 8002bba:	b928      	cbnz	r0, 8002bc8 <_svfiprintf_r+0x30>
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	f8c8 3000 	str.w	r3, [r8]
 8002bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc6:	e0c8      	b.n	8002d5a <_svfiprintf_r+0x1c2>
 8002bc8:	2340      	movs	r3, #64	; 0x40
 8002bca:	6163      	str	r3, [r4, #20]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9309      	str	r3, [sp, #36]	; 0x24
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bd6:	2330      	movs	r3, #48	; 0x30
 8002bd8:	f04f 0b01 	mov.w	fp, #1
 8002bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002be0:	9503      	str	r5, [sp, #12]
 8002be2:	4637      	mov	r7, r6
 8002be4:	463d      	mov	r5, r7
 8002be6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002bea:	b10b      	cbz	r3, 8002bf0 <_svfiprintf_r+0x58>
 8002bec:	2b25      	cmp	r3, #37	; 0x25
 8002bee:	d13e      	bne.n	8002c6e <_svfiprintf_r+0xd6>
 8002bf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002bf4:	d00b      	beq.n	8002c0e <_svfiprintf_r+0x76>
 8002bf6:	4653      	mov	r3, sl
 8002bf8:	4632      	mov	r2, r6
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4640      	mov	r0, r8
 8002bfe:	f7ff ff71 	bl	8002ae4 <__ssputs_r>
 8002c02:	3001      	adds	r0, #1
 8002c04:	f000 80a4 	beq.w	8002d50 <_svfiprintf_r+0x1b8>
 8002c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c0a:	4453      	add	r3, sl
 8002c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0e:	783b      	ldrb	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 809d 	beq.w	8002d50 <_svfiprintf_r+0x1b8>
 8002c16:	2300      	movs	r3, #0
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c20:	9304      	str	r3, [sp, #16]
 8002c22:	9307      	str	r3, [sp, #28]
 8002c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c28:	931a      	str	r3, [sp, #104]	; 0x68
 8002c2a:	462f      	mov	r7, r5
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002c32:	4850      	ldr	r0, [pc, #320]	; (8002d74 <_svfiprintf_r+0x1dc>)
 8002c34:	f000 fa30 	bl	8003098 <memchr>
 8002c38:	9b04      	ldr	r3, [sp, #16]
 8002c3a:	b9d0      	cbnz	r0, 8002c72 <_svfiprintf_r+0xda>
 8002c3c:	06d9      	lsls	r1, r3, #27
 8002c3e:	bf44      	itt	mi
 8002c40:	2220      	movmi	r2, #32
 8002c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c46:	071a      	lsls	r2, r3, #28
 8002c48:	bf44      	itt	mi
 8002c4a:	222b      	movmi	r2, #43	; 0x2b
 8002c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c50:	782a      	ldrb	r2, [r5, #0]
 8002c52:	2a2a      	cmp	r2, #42	; 0x2a
 8002c54:	d015      	beq.n	8002c82 <_svfiprintf_r+0xea>
 8002c56:	462f      	mov	r7, r5
 8002c58:	2000      	movs	r0, #0
 8002c5a:	250a      	movs	r5, #10
 8002c5c:	9a07      	ldr	r2, [sp, #28]
 8002c5e:	4639      	mov	r1, r7
 8002c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c64:	3b30      	subs	r3, #48	; 0x30
 8002c66:	2b09      	cmp	r3, #9
 8002c68:	d94d      	bls.n	8002d06 <_svfiprintf_r+0x16e>
 8002c6a:	b1b8      	cbz	r0, 8002c9c <_svfiprintf_r+0x104>
 8002c6c:	e00f      	b.n	8002c8e <_svfiprintf_r+0xf6>
 8002c6e:	462f      	mov	r7, r5
 8002c70:	e7b8      	b.n	8002be4 <_svfiprintf_r+0x4c>
 8002c72:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <_svfiprintf_r+0x1dc>)
 8002c74:	463d      	mov	r5, r7
 8002c76:	1a80      	subs	r0, r0, r2
 8002c78:	fa0b f000 	lsl.w	r0, fp, r0
 8002c7c:	4318      	orrs	r0, r3
 8002c7e:	9004      	str	r0, [sp, #16]
 8002c80:	e7d3      	b.n	8002c2a <_svfiprintf_r+0x92>
 8002c82:	9a03      	ldr	r2, [sp, #12]
 8002c84:	1d11      	adds	r1, r2, #4
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	9103      	str	r1, [sp, #12]
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	db01      	blt.n	8002c92 <_svfiprintf_r+0xfa>
 8002c8e:	9207      	str	r2, [sp, #28]
 8002c90:	e004      	b.n	8002c9c <_svfiprintf_r+0x104>
 8002c92:	4252      	negs	r2, r2
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	9207      	str	r2, [sp, #28]
 8002c9a:	9304      	str	r3, [sp, #16]
 8002c9c:	783b      	ldrb	r3, [r7, #0]
 8002c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca0:	d10c      	bne.n	8002cbc <_svfiprintf_r+0x124>
 8002ca2:	787b      	ldrb	r3, [r7, #1]
 8002ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca6:	d133      	bne.n	8002d10 <_svfiprintf_r+0x178>
 8002ca8:	9b03      	ldr	r3, [sp, #12]
 8002caa:	3702      	adds	r7, #2
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	9203      	str	r2, [sp, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bfb8      	it	lt
 8002cb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002cba:	9305      	str	r3, [sp, #20]
 8002cbc:	4d2e      	ldr	r5, [pc, #184]	; (8002d78 <_svfiprintf_r+0x1e0>)
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	7839      	ldrb	r1, [r7, #0]
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f000 f9e8 	bl	8003098 <memchr>
 8002cc8:	b138      	cbz	r0, 8002cda <_svfiprintf_r+0x142>
 8002cca:	2340      	movs	r3, #64	; 0x40
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	fa03 f000 	lsl.w	r0, r3, r0
 8002cd2:	9b04      	ldr	r3, [sp, #16]
 8002cd4:	3701      	adds	r7, #1
 8002cd6:	4303      	orrs	r3, r0
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	7839      	ldrb	r1, [r7, #0]
 8002cdc:	2206      	movs	r2, #6
 8002cde:	4827      	ldr	r0, [pc, #156]	; (8002d7c <_svfiprintf_r+0x1e4>)
 8002ce0:	1c7e      	adds	r6, r7, #1
 8002ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ce6:	f000 f9d7 	bl	8003098 <memchr>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d038      	beq.n	8002d60 <_svfiprintf_r+0x1c8>
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <_svfiprintf_r+0x1e8>)
 8002cf0:	bb13      	cbnz	r3, 8002d38 <_svfiprintf_r+0x1a0>
 8002cf2:	9b03      	ldr	r3, [sp, #12]
 8002cf4:	3307      	adds	r3, #7
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d00:	444b      	add	r3, r9
 8002d02:	9309      	str	r3, [sp, #36]	; 0x24
 8002d04:	e76d      	b.n	8002be2 <_svfiprintf_r+0x4a>
 8002d06:	fb05 3202 	mla	r2, r5, r2, r3
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	460f      	mov	r7, r1
 8002d0e:	e7a6      	b.n	8002c5e <_svfiprintf_r+0xc6>
 8002d10:	2300      	movs	r3, #0
 8002d12:	250a      	movs	r5, #10
 8002d14:	4619      	mov	r1, r3
 8002d16:	3701      	adds	r7, #1
 8002d18:	9305      	str	r3, [sp, #20]
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d20:	3a30      	subs	r2, #48	; 0x30
 8002d22:	2a09      	cmp	r2, #9
 8002d24:	d903      	bls.n	8002d2e <_svfiprintf_r+0x196>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0c8      	beq.n	8002cbc <_svfiprintf_r+0x124>
 8002d2a:	9105      	str	r1, [sp, #20]
 8002d2c:	e7c6      	b.n	8002cbc <_svfiprintf_r+0x124>
 8002d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8002d32:	2301      	movs	r3, #1
 8002d34:	4607      	mov	r7, r0
 8002d36:	e7f0      	b.n	8002d1a <_svfiprintf_r+0x182>
 8002d38:	ab03      	add	r3, sp, #12
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_svfiprintf_r+0x1ec>)
 8002d40:	a904      	add	r1, sp, #16
 8002d42:	4640      	mov	r0, r8
 8002d44:	f3af 8000 	nop.w
 8002d48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002d4c:	4681      	mov	r9, r0
 8002d4e:	d1d6      	bne.n	8002cfe <_svfiprintf_r+0x166>
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	065b      	lsls	r3, r3, #25
 8002d54:	f53f af35 	bmi.w	8002bc2 <_svfiprintf_r+0x2a>
 8002d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d5a:	b01d      	add	sp, #116	; 0x74
 8002d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d60:	ab03      	add	r3, sp, #12
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4622      	mov	r2, r4
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_svfiprintf_r+0x1ec>)
 8002d68:	a904      	add	r1, sp, #16
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	f000 f882 	bl	8002e74 <_printf_i>
 8002d70:	e7ea      	b.n	8002d48 <_svfiprintf_r+0x1b0>
 8002d72:	bf00      	nop
 8002d74:	08003320 	.word	0x08003320
 8002d78:	08003326 	.word	0x08003326
 8002d7c:	0800332a 	.word	0x0800332a
 8002d80:	00000000 	.word	0x00000000
 8002d84:	08002ae5 	.word	0x08002ae5

08002d88 <_printf_common>:
 8002d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d8c:	4691      	mov	r9, r2
 8002d8e:	461f      	mov	r7, r3
 8002d90:	688a      	ldr	r2, [r1, #8]
 8002d92:	690b      	ldr	r3, [r1, #16]
 8002d94:	4606      	mov	r6, r0
 8002d96:	4293      	cmp	r3, r2
 8002d98:	bfb8      	it	lt
 8002d9a:	4613      	movlt	r3, r2
 8002d9c:	f8c9 3000 	str.w	r3, [r9]
 8002da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002da4:	460c      	mov	r4, r1
 8002da6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002daa:	b112      	cbz	r2, 8002db2 <_printf_common+0x2a>
 8002dac:	3301      	adds	r3, #1
 8002dae:	f8c9 3000 	str.w	r3, [r9]
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	0699      	lsls	r1, r3, #26
 8002db6:	bf42      	ittt	mi
 8002db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002dbc:	3302      	addmi	r3, #2
 8002dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	f015 0506 	ands.w	r5, r5, #6
 8002dc8:	d107      	bne.n	8002dda <_printf_common+0x52>
 8002dca:	f104 0a19 	add.w	sl, r4, #25
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	42ab      	cmp	r3, r5
 8002dd8:	dc29      	bgt.n	8002e2e <_printf_common+0xa6>
 8002dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	3300      	adds	r3, #0
 8002de2:	bf18      	it	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	0692      	lsls	r2, r2, #26
 8002de8:	d42e      	bmi.n	8002e48 <_printf_common+0xc0>
 8002dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dee:	4639      	mov	r1, r7
 8002df0:	4630      	mov	r0, r6
 8002df2:	47c0      	blx	r8
 8002df4:	3001      	adds	r0, #1
 8002df6:	d021      	beq.n	8002e3c <_printf_common+0xb4>
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	68e5      	ldr	r5, [r4, #12]
 8002dfc:	f003 0306 	and.w	r3, r3, #6
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	bf18      	it	ne
 8002e04:	2500      	movne	r5, #0
 8002e06:	f8d9 2000 	ldr.w	r2, [r9]
 8002e0a:	f04f 0900 	mov.w	r9, #0
 8002e0e:	bf08      	it	eq
 8002e10:	1aad      	subeq	r5, r5, r2
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	6922      	ldr	r2, [r4, #16]
 8002e16:	bf08      	it	eq
 8002e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bfc4      	itt	gt
 8002e20:	1a9b      	subgt	r3, r3, r2
 8002e22:	18ed      	addgt	r5, r5, r3
 8002e24:	341a      	adds	r4, #26
 8002e26:	454d      	cmp	r5, r9
 8002e28:	d11a      	bne.n	8002e60 <_printf_common+0xd8>
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e008      	b.n	8002e40 <_printf_common+0xb8>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4652      	mov	r2, sl
 8002e32:	4639      	mov	r1, r7
 8002e34:	4630      	mov	r0, r6
 8002e36:	47c0      	blx	r8
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d103      	bne.n	8002e44 <_printf_common+0xbc>
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e44:	3501      	adds	r5, #1
 8002e46:	e7c2      	b.n	8002dce <_printf_common+0x46>
 8002e48:	2030      	movs	r0, #48	; 0x30
 8002e4a:	18e1      	adds	r1, r4, r3
 8002e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e56:	4422      	add	r2, r4
 8002e58:	3302      	adds	r3, #2
 8002e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e5e:	e7c4      	b.n	8002dea <_printf_common+0x62>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4622      	mov	r2, r4
 8002e64:	4639      	mov	r1, r7
 8002e66:	4630      	mov	r0, r6
 8002e68:	47c0      	blx	r8
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d0e6      	beq.n	8002e3c <_printf_common+0xb4>
 8002e6e:	f109 0901 	add.w	r9, r9, #1
 8002e72:	e7d8      	b.n	8002e26 <_printf_common+0x9e>

08002e74 <_printf_i>:
 8002e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	7e09      	ldrb	r1, [r1, #24]
 8002e80:	b085      	sub	sp, #20
 8002e82:	296e      	cmp	r1, #110	; 0x6e
 8002e84:	4617      	mov	r7, r2
 8002e86:	4606      	mov	r6, r0
 8002e88:	4698      	mov	r8, r3
 8002e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e8c:	f000 80b3 	beq.w	8002ff6 <_printf_i+0x182>
 8002e90:	d822      	bhi.n	8002ed8 <_printf_i+0x64>
 8002e92:	2963      	cmp	r1, #99	; 0x63
 8002e94:	d036      	beq.n	8002f04 <_printf_i+0x90>
 8002e96:	d80a      	bhi.n	8002eae <_printf_i+0x3a>
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	f000 80b9 	beq.w	8003010 <_printf_i+0x19c>
 8002e9e:	2958      	cmp	r1, #88	; 0x58
 8002ea0:	f000 8083 	beq.w	8002faa <_printf_i+0x136>
 8002ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002eac:	e032      	b.n	8002f14 <_printf_i+0xa0>
 8002eae:	2964      	cmp	r1, #100	; 0x64
 8002eb0:	d001      	beq.n	8002eb6 <_printf_i+0x42>
 8002eb2:	2969      	cmp	r1, #105	; 0x69
 8002eb4:	d1f6      	bne.n	8002ea4 <_printf_i+0x30>
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	0605      	lsls	r5, r0, #24
 8002ebc:	f103 0104 	add.w	r1, r3, #4
 8002ec0:	d52a      	bpl.n	8002f18 <_printf_i+0xa4>
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6011      	str	r1, [r2, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da03      	bge.n	8002ed2 <_printf_i+0x5e>
 8002eca:	222d      	movs	r2, #45	; 0x2d
 8002ecc:	425b      	negs	r3, r3
 8002ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ed2:	486f      	ldr	r0, [pc, #444]	; (8003090 <_printf_i+0x21c>)
 8002ed4:	220a      	movs	r2, #10
 8002ed6:	e039      	b.n	8002f4c <_printf_i+0xd8>
 8002ed8:	2973      	cmp	r1, #115	; 0x73
 8002eda:	f000 809d 	beq.w	8003018 <_printf_i+0x1a4>
 8002ede:	d808      	bhi.n	8002ef2 <_printf_i+0x7e>
 8002ee0:	296f      	cmp	r1, #111	; 0x6f
 8002ee2:	d020      	beq.n	8002f26 <_printf_i+0xb2>
 8002ee4:	2970      	cmp	r1, #112	; 0x70
 8002ee6:	d1dd      	bne.n	8002ea4 <_printf_i+0x30>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	e003      	b.n	8002efa <_printf_i+0x86>
 8002ef2:	2975      	cmp	r1, #117	; 0x75
 8002ef4:	d017      	beq.n	8002f26 <_printf_i+0xb2>
 8002ef6:	2978      	cmp	r1, #120	; 0x78
 8002ef8:	d1d4      	bne.n	8002ea4 <_printf_i+0x30>
 8002efa:	2378      	movs	r3, #120	; 0x78
 8002efc:	4865      	ldr	r0, [pc, #404]	; (8003094 <_printf_i+0x220>)
 8002efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f02:	e055      	b.n	8002fb0 <_printf_i+0x13c>
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f0a:	1d19      	adds	r1, r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6011      	str	r1, [r2, #0]
 8002f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f14:	2301      	movs	r3, #1
 8002f16:	e08c      	b.n	8003032 <_printf_i+0x1be>
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f1e:	6011      	str	r1, [r2, #0]
 8002f20:	bf18      	it	ne
 8002f22:	b21b      	sxthne	r3, r3
 8002f24:	e7cf      	b.n	8002ec6 <_printf_i+0x52>
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	6825      	ldr	r5, [r4, #0]
 8002f2a:	1d18      	adds	r0, r3, #4
 8002f2c:	6010      	str	r0, [r2, #0]
 8002f2e:	0628      	lsls	r0, r5, #24
 8002f30:	d501      	bpl.n	8002f36 <_printf_i+0xc2>
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	e002      	b.n	8002f3c <_printf_i+0xc8>
 8002f36:	0668      	lsls	r0, r5, #25
 8002f38:	d5fb      	bpl.n	8002f32 <_printf_i+0xbe>
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	296f      	cmp	r1, #111	; 0x6f
 8002f3e:	bf14      	ite	ne
 8002f40:	220a      	movne	r2, #10
 8002f42:	2208      	moveq	r2, #8
 8002f44:	4852      	ldr	r0, [pc, #328]	; (8003090 <_printf_i+0x21c>)
 8002f46:	2100      	movs	r1, #0
 8002f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f4c:	6865      	ldr	r5, [r4, #4]
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	60a5      	str	r5, [r4, #8]
 8002f52:	f2c0 8095 	blt.w	8003080 <_printf_i+0x20c>
 8002f56:	6821      	ldr	r1, [r4, #0]
 8002f58:	f021 0104 	bic.w	r1, r1, #4
 8002f5c:	6021      	str	r1, [r4, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13d      	bne.n	8002fde <_printf_i+0x16a>
 8002f62:	2d00      	cmp	r5, #0
 8002f64:	f040 808e 	bne.w	8003084 <_printf_i+0x210>
 8002f68:	4665      	mov	r5, ip
 8002f6a:	2a08      	cmp	r2, #8
 8002f6c:	d10b      	bne.n	8002f86 <_printf_i+0x112>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	07db      	lsls	r3, r3, #31
 8002f72:	d508      	bpl.n	8002f86 <_printf_i+0x112>
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	6862      	ldr	r2, [r4, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	bfde      	ittt	le
 8002f7c:	2330      	movle	r3, #48	; 0x30
 8002f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002f86:	ebac 0305 	sub.w	r3, ip, r5
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	f8cd 8000 	str.w	r8, [sp]
 8002f90:	463b      	mov	r3, r7
 8002f92:	aa03      	add	r2, sp, #12
 8002f94:	4621      	mov	r1, r4
 8002f96:	4630      	mov	r0, r6
 8002f98:	f7ff fef6 	bl	8002d88 <_printf_common>
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d14d      	bne.n	800303c <_printf_i+0x1c8>
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa4:	b005      	add	sp, #20
 8002fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002faa:	4839      	ldr	r0, [pc, #228]	; (8003090 <_printf_i+0x21c>)
 8002fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002fb0:	6813      	ldr	r3, [r2, #0]
 8002fb2:	6821      	ldr	r1, [r4, #0]
 8002fb4:	1d1d      	adds	r5, r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6015      	str	r5, [r2, #0]
 8002fba:	060a      	lsls	r2, r1, #24
 8002fbc:	d50b      	bpl.n	8002fd6 <_printf_i+0x162>
 8002fbe:	07ca      	lsls	r2, r1, #31
 8002fc0:	bf44      	itt	mi
 8002fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8002fc6:	6021      	strmi	r1, [r4, #0]
 8002fc8:	b91b      	cbnz	r3, 8002fd2 <_printf_i+0x15e>
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	f022 0220 	bic.w	r2, r2, #32
 8002fd0:	6022      	str	r2, [r4, #0]
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	e7b7      	b.n	8002f46 <_printf_i+0xd2>
 8002fd6:	064d      	lsls	r5, r1, #25
 8002fd8:	bf48      	it	mi
 8002fda:	b29b      	uxthmi	r3, r3
 8002fdc:	e7ef      	b.n	8002fbe <_printf_i+0x14a>
 8002fde:	4665      	mov	r5, ip
 8002fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8002fe8:	5cc3      	ldrb	r3, [r0, r3]
 8002fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fee:	460b      	mov	r3, r1
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d1f5      	bne.n	8002fe0 <_printf_i+0x16c>
 8002ff4:	e7b9      	b.n	8002f6a <_printf_i+0xf6>
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	6825      	ldr	r5, [r4, #0]
 8002ffa:	1d18      	adds	r0, r3, #4
 8002ffc:	6961      	ldr	r1, [r4, #20]
 8002ffe:	6010      	str	r0, [r2, #0]
 8003000:	0628      	lsls	r0, r5, #24
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	d501      	bpl.n	800300a <_printf_i+0x196>
 8003006:	6019      	str	r1, [r3, #0]
 8003008:	e002      	b.n	8003010 <_printf_i+0x19c>
 800300a:	066a      	lsls	r2, r5, #25
 800300c:	d5fb      	bpl.n	8003006 <_printf_i+0x192>
 800300e:	8019      	strh	r1, [r3, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	4665      	mov	r5, ip
 8003014:	6123      	str	r3, [r4, #16]
 8003016:	e7b9      	b.n	8002f8c <_printf_i+0x118>
 8003018:	6813      	ldr	r3, [r2, #0]
 800301a:	1d19      	adds	r1, r3, #4
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	681d      	ldr	r5, [r3, #0]
 8003020:	6862      	ldr	r2, [r4, #4]
 8003022:	2100      	movs	r1, #0
 8003024:	4628      	mov	r0, r5
 8003026:	f000 f837 	bl	8003098 <memchr>
 800302a:	b108      	cbz	r0, 8003030 <_printf_i+0x1bc>
 800302c:	1b40      	subs	r0, r0, r5
 800302e:	6060      	str	r0, [r4, #4]
 8003030:	6863      	ldr	r3, [r4, #4]
 8003032:	6123      	str	r3, [r4, #16]
 8003034:	2300      	movs	r3, #0
 8003036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800303a:	e7a7      	b.n	8002f8c <_printf_i+0x118>
 800303c:	6923      	ldr	r3, [r4, #16]
 800303e:	462a      	mov	r2, r5
 8003040:	4639      	mov	r1, r7
 8003042:	4630      	mov	r0, r6
 8003044:	47c0      	blx	r8
 8003046:	3001      	adds	r0, #1
 8003048:	d0aa      	beq.n	8002fa0 <_printf_i+0x12c>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	079b      	lsls	r3, r3, #30
 800304e:	d413      	bmi.n	8003078 <_printf_i+0x204>
 8003050:	68e0      	ldr	r0, [r4, #12]
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	4298      	cmp	r0, r3
 8003056:	bfb8      	it	lt
 8003058:	4618      	movlt	r0, r3
 800305a:	e7a3      	b.n	8002fa4 <_printf_i+0x130>
 800305c:	2301      	movs	r3, #1
 800305e:	464a      	mov	r2, r9
 8003060:	4639      	mov	r1, r7
 8003062:	4630      	mov	r0, r6
 8003064:	47c0      	blx	r8
 8003066:	3001      	adds	r0, #1
 8003068:	d09a      	beq.n	8002fa0 <_printf_i+0x12c>
 800306a:	3501      	adds	r5, #1
 800306c:	68e3      	ldr	r3, [r4, #12]
 800306e:	9a03      	ldr	r2, [sp, #12]
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	42ab      	cmp	r3, r5
 8003074:	dcf2      	bgt.n	800305c <_printf_i+0x1e8>
 8003076:	e7eb      	b.n	8003050 <_printf_i+0x1dc>
 8003078:	2500      	movs	r5, #0
 800307a:	f104 0919 	add.w	r9, r4, #25
 800307e:	e7f5      	b.n	800306c <_printf_i+0x1f8>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ac      	bne.n	8002fde <_printf_i+0x16a>
 8003084:	7803      	ldrb	r3, [r0, #0]
 8003086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800308a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800308e:	e76c      	b.n	8002f6a <_printf_i+0xf6>
 8003090:	08003331 	.word	0x08003331
 8003094:	08003342 	.word	0x08003342

08003098 <memchr>:
 8003098:	b510      	push	{r4, lr}
 800309a:	b2c9      	uxtb	r1, r1
 800309c:	4402      	add	r2, r0
 800309e:	4290      	cmp	r0, r2
 80030a0:	4603      	mov	r3, r0
 80030a2:	d101      	bne.n	80030a8 <memchr+0x10>
 80030a4:	2300      	movs	r3, #0
 80030a6:	e003      	b.n	80030b0 <memchr+0x18>
 80030a8:	781c      	ldrb	r4, [r3, #0]
 80030aa:	3001      	adds	r0, #1
 80030ac:	428c      	cmp	r4, r1
 80030ae:	d1f6      	bne.n	800309e <memchr+0x6>
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <memcpy>:
 80030b4:	b510      	push	{r4, lr}
 80030b6:	1e43      	subs	r3, r0, #1
 80030b8:	440a      	add	r2, r1
 80030ba:	4291      	cmp	r1, r2
 80030bc:	d100      	bne.n	80030c0 <memcpy+0xc>
 80030be:	bd10      	pop	{r4, pc}
 80030c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030c8:	e7f7      	b.n	80030ba <memcpy+0x6>

080030ca <memmove>:
 80030ca:	4288      	cmp	r0, r1
 80030cc:	b510      	push	{r4, lr}
 80030ce:	eb01 0302 	add.w	r3, r1, r2
 80030d2:	d807      	bhi.n	80030e4 <memmove+0x1a>
 80030d4:	1e42      	subs	r2, r0, #1
 80030d6:	4299      	cmp	r1, r3
 80030d8:	d00a      	beq.n	80030f0 <memmove+0x26>
 80030da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030e2:	e7f8      	b.n	80030d6 <memmove+0xc>
 80030e4:	4283      	cmp	r3, r0
 80030e6:	d9f5      	bls.n	80030d4 <memmove+0xa>
 80030e8:	1881      	adds	r1, r0, r2
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	42d3      	cmn	r3, r2
 80030ee:	d100      	bne.n	80030f2 <memmove+0x28>
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80030fa:	e7f7      	b.n	80030ec <memmove+0x22>

080030fc <_free_r>:
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4605      	mov	r5, r0
 8003100:	2900      	cmp	r1, #0
 8003102:	d043      	beq.n	800318c <_free_r+0x90>
 8003104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003108:	1f0c      	subs	r4, r1, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	bfb8      	it	lt
 800310e:	18e4      	addlt	r4, r4, r3
 8003110:	f000 f8d0 	bl	80032b4 <__malloc_lock>
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <_free_r+0x94>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	4610      	mov	r0, r2
 800311a:	b933      	cbnz	r3, 800312a <_free_r+0x2e>
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	6014      	str	r4, [r2, #0]
 8003120:	4628      	mov	r0, r5
 8003122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003126:	f000 b8c6 	b.w	80032b6 <__malloc_unlock>
 800312a:	42a3      	cmp	r3, r4
 800312c:	d90b      	bls.n	8003146 <_free_r+0x4a>
 800312e:	6821      	ldr	r1, [r4, #0]
 8003130:	1862      	adds	r2, r4, r1
 8003132:	4293      	cmp	r3, r2
 8003134:	bf01      	itttt	eq
 8003136:	681a      	ldreq	r2, [r3, #0]
 8003138:	685b      	ldreq	r3, [r3, #4]
 800313a:	1852      	addeq	r2, r2, r1
 800313c:	6022      	streq	r2, [r4, #0]
 800313e:	6063      	str	r3, [r4, #4]
 8003140:	6004      	str	r4, [r0, #0]
 8003142:	e7ed      	b.n	8003120 <_free_r+0x24>
 8003144:	4613      	mov	r3, r2
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	b10a      	cbz	r2, 800314e <_free_r+0x52>
 800314a:	42a2      	cmp	r2, r4
 800314c:	d9fa      	bls.n	8003144 <_free_r+0x48>
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	1858      	adds	r0, r3, r1
 8003152:	42a0      	cmp	r0, r4
 8003154:	d10b      	bne.n	800316e <_free_r+0x72>
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	4401      	add	r1, r0
 800315a:	1858      	adds	r0, r3, r1
 800315c:	4282      	cmp	r2, r0
 800315e:	6019      	str	r1, [r3, #0]
 8003160:	d1de      	bne.n	8003120 <_free_r+0x24>
 8003162:	6810      	ldr	r0, [r2, #0]
 8003164:	6852      	ldr	r2, [r2, #4]
 8003166:	4401      	add	r1, r0
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	e7d8      	b.n	8003120 <_free_r+0x24>
 800316e:	d902      	bls.n	8003176 <_free_r+0x7a>
 8003170:	230c      	movs	r3, #12
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	e7d4      	b.n	8003120 <_free_r+0x24>
 8003176:	6820      	ldr	r0, [r4, #0]
 8003178:	1821      	adds	r1, r4, r0
 800317a:	428a      	cmp	r2, r1
 800317c:	bf01      	itttt	eq
 800317e:	6811      	ldreq	r1, [r2, #0]
 8003180:	6852      	ldreq	r2, [r2, #4]
 8003182:	1809      	addeq	r1, r1, r0
 8003184:	6021      	streq	r1, [r4, #0]
 8003186:	6062      	str	r2, [r4, #4]
 8003188:	605c      	str	r4, [r3, #4]
 800318a:	e7c9      	b.n	8003120 <_free_r+0x24>
 800318c:	bd38      	pop	{r3, r4, r5, pc}
 800318e:	bf00      	nop
 8003190:	20000090 	.word	0x20000090

08003194 <_malloc_r>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	1ccd      	adds	r5, r1, #3
 8003198:	f025 0503 	bic.w	r5, r5, #3
 800319c:	3508      	adds	r5, #8
 800319e:	2d0c      	cmp	r5, #12
 80031a0:	bf38      	it	cc
 80031a2:	250c      	movcc	r5, #12
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	4606      	mov	r6, r0
 80031a8:	db01      	blt.n	80031ae <_malloc_r+0x1a>
 80031aa:	42a9      	cmp	r1, r5
 80031ac:	d903      	bls.n	80031b6 <_malloc_r+0x22>
 80031ae:	230c      	movs	r3, #12
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	2000      	movs	r0, #0
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	f000 f87d 	bl	80032b4 <__malloc_lock>
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <_malloc_r+0xac>)
 80031bc:	6814      	ldr	r4, [r2, #0]
 80031be:	4621      	mov	r1, r4
 80031c0:	b991      	cbnz	r1, 80031e8 <_malloc_r+0x54>
 80031c2:	4c20      	ldr	r4, [pc, #128]	; (8003244 <_malloc_r+0xb0>)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	b91b      	cbnz	r3, 80031d0 <_malloc_r+0x3c>
 80031c8:	4630      	mov	r0, r6
 80031ca:	f000 f863 	bl	8003294 <_sbrk_r>
 80031ce:	6020      	str	r0, [r4, #0]
 80031d0:	4629      	mov	r1, r5
 80031d2:	4630      	mov	r0, r6
 80031d4:	f000 f85e 	bl	8003294 <_sbrk_r>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d124      	bne.n	8003226 <_malloc_r+0x92>
 80031dc:	230c      	movs	r3, #12
 80031de:	4630      	mov	r0, r6
 80031e0:	6033      	str	r3, [r6, #0]
 80031e2:	f000 f868 	bl	80032b6 <__malloc_unlock>
 80031e6:	e7e4      	b.n	80031b2 <_malloc_r+0x1e>
 80031e8:	680b      	ldr	r3, [r1, #0]
 80031ea:	1b5b      	subs	r3, r3, r5
 80031ec:	d418      	bmi.n	8003220 <_malloc_r+0x8c>
 80031ee:	2b0b      	cmp	r3, #11
 80031f0:	d90f      	bls.n	8003212 <_malloc_r+0x7e>
 80031f2:	600b      	str	r3, [r1, #0]
 80031f4:	18cc      	adds	r4, r1, r3
 80031f6:	50cd      	str	r5, [r1, r3]
 80031f8:	4630      	mov	r0, r6
 80031fa:	f000 f85c 	bl	80032b6 <__malloc_unlock>
 80031fe:	f104 000b 	add.w	r0, r4, #11
 8003202:	1d23      	adds	r3, r4, #4
 8003204:	f020 0007 	bic.w	r0, r0, #7
 8003208:	1ac3      	subs	r3, r0, r3
 800320a:	d0d3      	beq.n	80031b4 <_malloc_r+0x20>
 800320c:	425a      	negs	r2, r3
 800320e:	50e2      	str	r2, [r4, r3]
 8003210:	e7d0      	b.n	80031b4 <_malloc_r+0x20>
 8003212:	684b      	ldr	r3, [r1, #4]
 8003214:	428c      	cmp	r4, r1
 8003216:	bf16      	itet	ne
 8003218:	6063      	strne	r3, [r4, #4]
 800321a:	6013      	streq	r3, [r2, #0]
 800321c:	460c      	movne	r4, r1
 800321e:	e7eb      	b.n	80031f8 <_malloc_r+0x64>
 8003220:	460c      	mov	r4, r1
 8003222:	6849      	ldr	r1, [r1, #4]
 8003224:	e7cc      	b.n	80031c0 <_malloc_r+0x2c>
 8003226:	1cc4      	adds	r4, r0, #3
 8003228:	f024 0403 	bic.w	r4, r4, #3
 800322c:	42a0      	cmp	r0, r4
 800322e:	d005      	beq.n	800323c <_malloc_r+0xa8>
 8003230:	1a21      	subs	r1, r4, r0
 8003232:	4630      	mov	r0, r6
 8003234:	f000 f82e 	bl	8003294 <_sbrk_r>
 8003238:	3001      	adds	r0, #1
 800323a:	d0cf      	beq.n	80031dc <_malloc_r+0x48>
 800323c:	6025      	str	r5, [r4, #0]
 800323e:	e7db      	b.n	80031f8 <_malloc_r+0x64>
 8003240:	20000090 	.word	0x20000090
 8003244:	20000094 	.word	0x20000094

08003248 <_realloc_r>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	4607      	mov	r7, r0
 800324c:	4614      	mov	r4, r2
 800324e:	460e      	mov	r6, r1
 8003250:	b921      	cbnz	r1, 800325c <_realloc_r+0x14>
 8003252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003256:	4611      	mov	r1, r2
 8003258:	f7ff bf9c 	b.w	8003194 <_malloc_r>
 800325c:	b922      	cbnz	r2, 8003268 <_realloc_r+0x20>
 800325e:	f7ff ff4d 	bl	80030fc <_free_r>
 8003262:	4625      	mov	r5, r4
 8003264:	4628      	mov	r0, r5
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003268:	f000 f826 	bl	80032b8 <_malloc_usable_size_r>
 800326c:	42a0      	cmp	r0, r4
 800326e:	d20f      	bcs.n	8003290 <_realloc_r+0x48>
 8003270:	4621      	mov	r1, r4
 8003272:	4638      	mov	r0, r7
 8003274:	f7ff ff8e 	bl	8003194 <_malloc_r>
 8003278:	4605      	mov	r5, r0
 800327a:	2800      	cmp	r0, #0
 800327c:	d0f2      	beq.n	8003264 <_realloc_r+0x1c>
 800327e:	4631      	mov	r1, r6
 8003280:	4622      	mov	r2, r4
 8003282:	f7ff ff17 	bl	80030b4 <memcpy>
 8003286:	4631      	mov	r1, r6
 8003288:	4638      	mov	r0, r7
 800328a:	f7ff ff37 	bl	80030fc <_free_r>
 800328e:	e7e9      	b.n	8003264 <_realloc_r+0x1c>
 8003290:	4635      	mov	r5, r6
 8003292:	e7e7      	b.n	8003264 <_realloc_r+0x1c>

08003294 <_sbrk_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	2300      	movs	r3, #0
 8003298:	4c05      	ldr	r4, [pc, #20]	; (80032b0 <_sbrk_r+0x1c>)
 800329a:	4605      	mov	r5, r0
 800329c:	4608      	mov	r0, r1
 800329e:	6023      	str	r3, [r4, #0]
 80032a0:	f7ff fb48 	bl	8002934 <_sbrk>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_sbrk_r+0x1a>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_sbrk_r+0x1a>
 80032ac:	602b      	str	r3, [r5, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	20000134 	.word	0x20000134

080032b4 <__malloc_lock>:
 80032b4:	4770      	bx	lr

080032b6 <__malloc_unlock>:
 80032b6:	4770      	bx	lr

080032b8 <_malloc_usable_size_r>:
 80032b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032bc:	1f18      	subs	r0, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfbc      	itt	lt
 80032c2:	580b      	ldrlt	r3, [r1, r0]
 80032c4:	18c0      	addlt	r0, r0, r3
 80032c6:	4770      	bx	lr

080032c8 <_init>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr

080032d4 <_fini>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	bf00      	nop
 80032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032da:	bc08      	pop	{r3}
 80032dc:	469e      	mov	lr, r3
 80032de:	4770      	bx	lr
