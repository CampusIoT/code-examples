
i2c_idosens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043ac  080043ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043ac  080043ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08004424  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004424  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000812b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000153e  00000000  00000000  000281c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000898  00000000  00000000  00029708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  00029fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001323e  00000000  00000000  0002a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006cd7  00000000  00000000  0003d9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a673  00000000  00000000  000446b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bed28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  000beda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08004310 	.word	0x08004310

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08004310 	.word	0x08004310

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a88:	f1a2 0201 	sub.w	r2, r2, #1
 8000a8c:	d1ed      	bne.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__aeabi_f2iz>:
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e90:	d30f      	bcc.n	8000eb2 <__aeabi_f2iz+0x2a>
 8000e92:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9a:	d90d      	bls.n	8000eb8 <__aeabi_f2iz+0x30>
 8000e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ea8:	fa23 f002 	lsr.w	r0, r3, r2
 8000eac:	bf18      	it	ne
 8000eae:	4240      	negne	r0, r0
 8000eb0:	4770      	bx	lr
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	4770      	bx	lr
 8000eb8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_f2iz+0x3a>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d105      	bne.n	8000ece <__aeabi_f2iz+0x46>
 8000ec2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ec6:	bf08      	it	eq
 8000ec8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ecc:	4770      	bx	lr
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f938 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 f80d 	bl	8000f04 <HAL_InitTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	e001      	b.n	8000efa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef6:	f002 fc61 	bl	80037bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_InitTick+0x68>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d022      	beq.n	8000f5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_InitTick+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f938 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10f      	bne.n	8000f58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	d809      	bhi.n	8000f52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f46:	f000 f910 	bl	800116a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_InitTick+0x70>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e007      	b.n	8000f62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e004      	b.n	8000f62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e001      	b.n	8000f62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f88:	6013      	str	r3, [r2, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000098 	.word	0x20000098
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000098 	.word	0x20000098

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff fff0 	bl	8000f9c <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc8:	d004      	beq.n	8000fd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_Delay+0x40>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd4:	bf00      	nop
 8000fd6:	f7ff ffe1 	bl	8000f9c <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d8f7      	bhi.n	8000fd6 <HAL_Delay+0x26>
  {
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff49 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5e 	bl	800103c <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011d2:	e154      	b.n	800147e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8146 	beq.w	8001478 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x40>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d00b      	beq.n	8001298 <HAL_GPIO_Init+0xdc>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d007      	beq.n	8001298 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128c:	2b11      	cmp	r3, #17
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b12      	cmp	r3, #18
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a0 	beq.w	8001478 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6213      	str	r3, [r2, #32]
 8001344:	4b54      	ldr	r3, [pc, #336]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_GPIO_Init+0x2e0>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a4a      	ldr	r2, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2e4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d019      	beq.n	80013b0 <HAL_GPIO_Init+0x1f4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d013      	beq.n	80013ac <HAL_GPIO_Init+0x1f0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d00d      	beq.n	80013a8 <HAL_GPIO_Init+0x1ec>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x1e8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <HAL_GPIO_Init+0x2f4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_GPIO_Init+0x1e4>
 800139c:	2304      	movs	r3, #4
 800139e:	e008      	b.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a0:	2305      	movs	r3, #5
 80013a2:	e006      	b.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a4:	2303      	movs	r3, #3
 80013a6:	e004      	b.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e002      	b.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013b0:	2300      	movs	r3, #0
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	f002 0203 	and.w	r2, r2, #3
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	4093      	lsls	r3, r2
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013c2:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_GPIO_Init+0x2e0>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f4:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800141e:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001448:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f aea3 	bne.w	80011d4 <HAL_GPIO_Init+0x18>
  } 
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	40010000 	.word	0x40010000
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e10f      	b.n	800171a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f002 f982 	bl	8003818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2224      	movs	r2, #36	; 0x24
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800152c:	f001 fbf6 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 8001530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a7b      	ldr	r2, [pc, #492]	; (8001724 <HAL_I2C_Init+0x23c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d807      	bhi.n	800154c <HAL_I2C_Init+0x64>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <HAL_I2C_Init+0x240>)
 8001540:	4293      	cmp	r3, r2
 8001542:	bf94      	ite	ls
 8001544:	2301      	movls	r3, #1
 8001546:	2300      	movhi	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e006      	b.n	800155a <HAL_I2C_Init+0x72>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_I2C_Init+0x244>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0db      	b.n	800171a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a72      	ldr	r2, [pc, #456]	; (8001730 <HAL_I2C_Init+0x248>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9b      	lsrs	r3, r3, #18
 800156c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a64      	ldr	r2, [pc, #400]	; (8001724 <HAL_I2C_Init+0x23c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d802      	bhi.n	800159c <HAL_I2C_Init+0xb4>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	e009      	b.n	80015b0 <HAL_I2C_Init+0xc8>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_I2C_Init+0x24c>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	3301      	adds	r3, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4956      	ldr	r1, [pc, #344]	; (8001724 <HAL_I2C_Init+0x23c>)
 80015cc:	428b      	cmp	r3, r1
 80015ce:	d80d      	bhi.n	80015ec <HAL_I2C_Init+0x104>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e59      	subs	r1, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fbb1 f3f3 	udiv	r3, r1, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	bf38      	it	cc
 80015e8:	2304      	movcc	r3, #4
 80015ea:	e04f      	b.n	800168c <HAL_I2C_Init+0x1a4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d111      	bne.n	8001618 <HAL_I2C_Init+0x130>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e012      	b.n	800163e <HAL_I2C_Init+0x156>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	0099      	lsls	r1, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_Init+0x15e>
 8001642:	2301      	movs	r3, #1
 8001644:	e022      	b.n	800168c <HAL_I2C_Init+0x1a4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10e      	bne.n	800166c <HAL_I2C_Init+0x184>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1e58      	subs	r0, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	440b      	add	r3, r1
 800165c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001660:	3301      	adds	r3, #1
 8001662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166a:	e00f      	b.n	800168c <HAL_I2C_Init+0x1a4>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	0099      	lsls	r1, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001682:	3301      	adds	r3, #1
 8001684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	6809      	ldr	r1, [r1, #0]
 8001690:	4313      	orrs	r3, r2
 8001692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6911      	ldr	r1, [r2, #16]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68d2      	ldr	r2, [r2, #12]
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2220      	movs	r2, #32
 8001706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	000186a0 	.word	0x000186a0
 8001728:	001e847f 	.word	0x001e847f
 800172c:	003d08ff 	.word	0x003d08ff
 8001730:	431bde83 	.word	0x431bde83
 8001734:	10624dd3 	.word	0x10624dd3

08001738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	460b      	mov	r3, r1
 8001746:	817b      	strh	r3, [r7, #10]
 8001748:	4613      	mov	r3, r2
 800174a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fc26 	bl	8000f9c <HAL_GetTick>
 8001750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b20      	cmp	r3, #32
 800175c:	f040 80e0 	bne.w	8001920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2319      	movs	r3, #25
 8001766:	2201      	movs	r2, #1
 8001768:	4970      	ldr	r1, [pc, #448]	; (800192c <HAL_I2C_Master_Transmit+0x1f4>)
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fc34 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	e0d3      	b.n	8001922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_I2C_Master_Transmit+0x50>
 8001784:	2302      	movs	r3, #2
 8001786:	e0cc      	b.n	8001922 <HAL_I2C_Master_Transmit+0x1ea>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d007      	beq.n	80017ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2221      	movs	r2, #33	; 0x21
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2210      	movs	r2, #16
 80017ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	893a      	ldrh	r2, [r7, #8]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4a50      	ldr	r2, [pc, #320]	; (8001930 <HAL_I2C_Master_Transmit+0x1f8>)
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017f0:	8979      	ldrh	r1, [r7, #10]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	6a3a      	ldr	r2, [r7, #32]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fac2 	bl	8001d80 <I2C_MasterRequestWrite>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e08d      	b.n	8001922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800181c:	e066      	b.n	80018ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fcae 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2b04      	cmp	r3, #4
 8001834:	d107      	bne.n	8001846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b04      	cmp	r3, #4
 8001886:	d11b      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0x188>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	d017      	beq.n	80018c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	6a39      	ldr	r1, [r7, #32]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fc9e 	bl	8002206 <I2C_WaitOnBTFFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e01a      	b.n	8001922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d194      	bne.n	800181e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e000      	b.n	8001922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001920:	2302      	movs	r3, #2
  }
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	00100002 	.word	0x00100002
 8001930:	ffff0000 	.word	0xffff0000

08001934 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	461a      	mov	r2, r3
 8001940:	460b      	mov	r3, r1
 8001942:	817b      	strh	r3, [r7, #10]
 8001944:	4613      	mov	r3, r2
 8001946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff fb28 	bl	8000f9c <HAL_GetTick>
 800194c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b20      	cmp	r3, #32
 8001958:	f040 820b 	bne.w	8001d72 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2319      	movs	r3, #25
 8001962:	2201      	movs	r2, #1
 8001964:	497c      	ldr	r1, [pc, #496]	; (8001b58 <HAL_I2C_Master_Receive+0x224>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fb36 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	e1fe      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_I2C_Master_Receive+0x50>
 8001980:	2302      	movs	r3, #2
 8001982:	e1f7      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b01      	cmp	r3, #1
 8001998:	d007      	beq.n	80019aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2222      	movs	r2, #34	; 0x22
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2210      	movs	r2, #16
 80019c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	893a      	ldrh	r2, [r7, #8]
 80019da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4a5c      	ldr	r2, [pc, #368]	; (8001b5c <HAL_I2C_Master_Receive+0x228>)
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019ec:	8979      	ldrh	r1, [r7, #10]
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fa3a 	bl	8001e6c <I2C_MasterRequestRead>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1b8      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d113      	bne.n	8001a32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e18c      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d11b      	bne.n	8001a72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e16c      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d11b      	bne.n	8001ab2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	e14c      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ad8:	e138      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	f200 80f1 	bhi.w	8001cc6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d123      	bne.n	8001b34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 fbc9 	bl	8002288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e139      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b32:	e10b      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d14e      	bne.n	8001bda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b42:	2200      	movs	r2, #0
 8001b44:	4906      	ldr	r1, [pc, #24]	; (8001b60 <HAL_I2C_Master_Receive+0x22c>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa46 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e10e      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
 8001b56:	bf00      	nop
 8001b58:	00100002 	.word	0x00100002
 8001b5c:	ffff0000 	.word	0xffff0000
 8001b60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd8:	e0b8      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be0:	2200      	movs	r2, #0
 8001be2:	4966      	ldr	r1, [pc, #408]	; (8001d7c <HAL_I2C_Master_Receive+0x448>)
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f9f7 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0bf      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	494f      	ldr	r1, [pc, #316]	; (8001d7c <HAL_I2C_Master_Receive+0x448>)
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f9c9 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e091      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cc4:	e042      	b.n	8001d4c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fadc 	bl	8002288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e04c      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d118      	bne.n	8001d4c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f aec2 	bne.w	8001ada <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
  }
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	00010004 	.word	0x00010004

08001d80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d006      	beq.n	8001daa <I2C_MasterRequestWrite+0x2a>
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d003      	beq.n	8001daa <I2C_MasterRequestWrite+0x2a>
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001da8:	d108      	bne.n	8001dbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e00b      	b.n	8001dd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	2b12      	cmp	r3, #18
 8001dc2:	d107      	bne.n	8001dd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f8f9 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e035      	b.n	8001e5c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d108      	bne.n	8001e0c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	e01b      	b.n	8001e44 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	11db      	asrs	r3, r3, #7
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0306 	and.w	r3, r3, #6
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f063 030f 	orn	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <I2C_MasterRequestWrite+0xe4>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f92b 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e010      	b.n	8001e5c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <I2C_MasterRequestWrite+0xe8>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f91b 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	00010008 	.word	0x00010008
 8001e68:	00010002 	.word	0x00010002

08001e6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d006      	beq.n	8001ea6 <I2C_MasterRequestRead+0x3a>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d003      	beq.n	8001ea6 <I2C_MasterRequestRead+0x3a>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ea4:	d108      	bne.n	8001eb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e00b      	b.n	8001ed0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	2b11      	cmp	r3, #17
 8001ebe:	d107      	bne.n	8001ed0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f87b 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e06d      	b.n	8001fc8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef4:	d108      	bne.n	8001f08 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e053      	b.n	8001fb0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	11db      	asrs	r3, r3, #7
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 0306 	and.w	r3, r3, #6
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f063 030f 	orn	r3, r3, #15
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	492a      	ldr	r1, [pc, #168]	; (8001fd0 <I2C_MasterRequestRead+0x164>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f8ad 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e048      	b.n	8001fc8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f36:	897b      	ldrh	r3, [r7, #10]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4923      	ldr	r1, [pc, #140]	; (8001fd4 <I2C_MasterRequestRead+0x168>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f89d 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e038      	b.n	8001fc8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f825 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e017      	b.n	8001fc8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f98:	897b      	ldrh	r3, [r7, #10]
 8001f9a:	11db      	asrs	r3, r3, #7
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f003 0306 	and.w	r3, r3, #6
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f063 030e 	orn	r3, r3, #14
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <I2C_MasterRequestRead+0x168>)
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f865 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	00010008 	.word	0x00010008
 8001fd4:	00010002 	.word	0x00010002

08001fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe8:	e025      	b.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff0:	d021      	beq.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff2:	f7fe ffd3 	bl	8000f9c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d302      	bcc.n	8002008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d116      	bne.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e023      	b.n	800207e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d10d      	bne.n	800205c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4013      	ands	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	e00c      	b.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	429a      	cmp	r2, r3
 800207a:	d0b6      	beq.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002094:	e051      	b.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d123      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0204 	orr.w	r2, r3, #4
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e046      	b.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f4:	d021      	beq.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7fe ff51 	bl	8000f9c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d116      	bne.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e020      	b.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10c      	bne.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e00b      	b.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	43da      	mvns	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d18d      	bne.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002190:	e02d      	b.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f8ce 	bl	8002334 <I2C_IsAcknowledgeFailed>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e02d      	b.n	80021fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a8:	d021      	beq.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7fe fef7 	bl	8000f9c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e007      	b.n	80021fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d1ca      	bne.n	8002192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002212:	e02d      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f88d 	bl	8002334 <I2C_IsAcknowledgeFailed>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e02d      	b.n	8002280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800222a:	d021      	beq.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe feb6 	bl	8000f9c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d1ca      	bne.n	8002214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002294:	e042      	b.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d119      	bne.n	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0210 	mvn.w	r2, #16
 80022ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e029      	b.n	800232c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d8:	f7fe fe60 	bl	8000f9c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d302      	bcc.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e007      	b.n	800232c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d1b5      	bne.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d11b      	bne.n	8002384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e31d      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a2:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ac:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d07b      	beq.n	80024ba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d006      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b87      	ldr	r3, [pc, #540]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06a      	beq.n	80024b8 <HAL_RCC_OscConfig+0x128>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d166      	bne.n	80024b8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e2f7      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d106      	bne.n	8002404 <HAL_RCC_OscConfig+0x74>
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e02d      	b.n	8002460 <HAL_RCC_OscConfig+0xd0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x96>
 800240c:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a78      	ldr	r2, [pc, #480]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a75      	ldr	r2, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e01c      	b.n	8002460 <HAL_RCC_OscConfig+0xd0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xb8>
 800242e:	4b71      	ldr	r3, [pc, #452]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a70      	ldr	r2, [pc, #448]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd0>
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a66      	ldr	r2, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fd98 	bl	8000f9c <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fd94 	bl	8000f9c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e2ad      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe0>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fd84 	bl	8000f9c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fd80 	bl	8000f9c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e299      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024aa:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x108>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d05a      	beq.n	800257c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d119      	bne.n	8002506 <HAL_RCC_OscConfig+0x176>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d116      	bne.n	8002506 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d8:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x160>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e276      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	493d      	ldr	r1, [pc, #244]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002504:	e03a      	b.n	800257c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCC_OscConfig+0x268>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fd42 	bl	8000f9c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fd3e 	bl	8000f9c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e257      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	492a      	ldr	r1, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e015      	b.n	800257c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x268>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fd21 	bl	8000f9c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fd1d 	bl	8000f9c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e236      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80b8 	beq.w	80026fa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d170      	bne.n	8002672 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x218>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e21a      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d921      	bls.n	80025fc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fbd5 	bl	8002d6c <RCC_SetFlashLatencyFromMSIRange>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e208      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4906      	ldr	r1, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4901      	ldr	r1, [pc, #4]	; (80025f4 <HAL_RCC_OscConfig+0x264>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	e020      	b.n	8002636 <HAL_RCC_OscConfig+0x2a6>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025fc:	4ba4      	ldr	r3, [pc, #656]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	49a1      	ldr	r1, [pc, #644]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260e:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	499c      	ldr	r1, [pc, #624]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fba0 	bl	8002d6c <RCC_SetFlashLatencyFromMSIRange>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e1d3      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	3301      	adds	r3, #1
 800263e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002646:	4a92      	ldr	r2, [pc, #584]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002648:	6892      	ldr	r2, [r2, #8]
 800264a:	0912      	lsrs	r2, r2, #4
 800264c:	f002 020f 	and.w	r2, r2, #15
 8002650:	4990      	ldr	r1, [pc, #576]	; (8002894 <HAL_RCC_OscConfig+0x504>)
 8002652:	5c8a      	ldrb	r2, [r1, r2]
 8002654:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002656:	4a90      	ldr	r2, [pc, #576]	; (8002898 <HAL_RCC_OscConfig+0x508>)
 8002658:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800265a:	4b90      	ldr	r3, [pc, #576]	; (800289c <HAL_RCC_OscConfig+0x50c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc50 	bl	8000f04 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d045      	beq.n	80026fa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	e1b5      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d029      	beq.n	80026ce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800267a:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <HAL_RCC_OscConfig+0x510>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fc8c 	bl	8000f9c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002688:	f7fe fc88 	bl	8000f9c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1a1      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800269a:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a6:	4b7a      	ldr	r3, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4977      	ldr	r1, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	4972      	ldr	r1, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <HAL_RCC_OscConfig+0x510>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc62 	bl	8000f9c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026dc:	f7fe fc5e 	bl	8000f9c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e177      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026ee:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d030      	beq.n	8002768 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x514>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe fc42 	bl	8000f9c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe fc3e 	bl	8000f9c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e157      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272e:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x38c>
 800273a:	e015      	b.n	8002768 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_OscConfig+0x514>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7fe fc2b 	bl	8000f9c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fc27 	bl	8000f9c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e140      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80b5 	beq.w	80028e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6253      	str	r3, [r2, #36]	; 0x24
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCC_OscConfig+0x518>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_RCC_OscConfig+0x518>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <HAL_RCC_OscConfig+0x518>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fbef 	bl	8000f9c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fbeb 	bl	8000f9c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e104      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_RCC_OscConfig+0x518>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x466>
 80027e8:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6353      	str	r3, [r2, #52]	; 0x34
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x4c2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x488>
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	6353      	str	r3, [r2, #52]	; 0x34
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002814:	6353      	str	r3, [r2, #52]	; 0x34
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x4c2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x4aa>
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282a:	6353      	str	r3, [r2, #52]	; 0x34
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6353      	str	r3, [r2, #52]	; 0x34
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x4c2>
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002844:	6353      	str	r3, [r2, #52]	; 0x34
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800284c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002850:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe fb9f 	bl	8000f9c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fb9b 	bl	8000f9c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0b2      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_OscConfig+0x500>)
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x4d2>
 8002884:	e023      	b.n	80028ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fb89 	bl	8000f9c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800288c:	e019      	b.n	80028c2 <HAL_RCC_OscConfig+0x532>
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	08004360 	.word	0x08004360
 8002898:	20000008 	.word	0x20000008
 800289c:	20000000 	.word	0x20000000
 80028a0:	42470020 	.word	0x42470020
 80028a4:	42470680 	.word	0x42470680
 80028a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fb76 	bl	8000f9c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e08d      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028c2:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	4a43      	ldr	r2, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d079      	beq.n	80029dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d056      	beq.n	800299c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d13b      	bne.n	800296e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x65c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fb4e 	bl	8000f9c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fb4a 	bl	8000f9c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e063      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	4319      	orrs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	430b      	orrs	r3, r1
 800293a:	492b      	ldr	r1, [pc, #172]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x65c>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fb29 	bl	8000f9c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fb25 	bl	8000f9c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e03e      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x5be>
 800296c:	e036      	b.n	80029dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <HAL_RCC_OscConfig+0x65c>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fb12 	bl	8000f9c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fb0e 	bl	8000f9c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e027      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x5ec>
 800299a:	e01f      	b.n	80029dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e01a      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_OscConfig+0x658>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10d      	bne.n	80029d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d106      	bne.n	80029d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470060 	.word	0x42470060

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e11a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d919      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x34>
 8002a18:	4b8a      	ldr	r3, [pc, #552]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a89      	ldr	r2, [pc, #548]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b87      	ldr	r3, [pc, #540]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0201 	bic.w	r2, r3, #1
 8002a2c:	4985      	ldr	r1, [pc, #532]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	4b83      	ldr	r3, [pc, #524]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0f9      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	497a      	ldr	r1, [pc, #488]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 808e 	beq.w	8002b8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d121      	bne.n	8002aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0d7      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d115      	bne.n	8002aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0cb      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0bf      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0b7      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	495c      	ldr	r1, [pc, #368]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fa5e 	bl	8000f9c <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d112      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fa56 	bl	8000f9c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e09b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d1ee      	bne.n	8002aec <HAL_RCC_ClockConfig+0xfc>
 8002b0e:	e03e      	b.n	8002b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d112      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1a:	f7fe fa3f 	bl	8000f9c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e084      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b30:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x12a>
 8002b3c:	e027      	b.n	8002b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d11d      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7fe fa28 	bl	8000f9c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06d      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x158>
 8002b6a:	e010      	b.n	8002b8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fe fa16 	bl	8000f9c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e05b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d219      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_RCC_ClockConfig+0x1be>
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0201 	bic.w	r2, r3, #1
 8002bb6:	4923      	ldr	r1, [pc, #140]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCC_ClockConfig+0x254>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e034      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4917      	ldr	r1, [pc, #92]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	490f      	ldr	r1, [pc, #60]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0e:	f000 f823 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_ClockConfig+0x258>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	fa21 f303 	lsr.w	r3, r1, r3
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x264>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f968 	bl	8000f04 <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c38:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08004360 	.word	0x08004360
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000000 	.word	0x20000000

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d006      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x24>
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d007      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x2a>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d12c      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c78:	613b      	str	r3, [r7, #16]
      break;
 8002c7a:	e037      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c7e:	613b      	str	r3, [r7, #16]
      break;
 8002c80:	e034      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	0c9b      	lsrs	r3, r3, #18
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0d9b      	lsrs	r3, r3, #22
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cac:	fb02 f203 	mul.w	r2, r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e007      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cbe:	fb02 f203 	mul.w	r2, r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	613b      	str	r3, [r7, #16]
      break;
 8002cce:	e00d      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0b5b      	lsrs	r3, r3, #13
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	613b      	str	r3, [r7, #16]
      break;
 8002cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cec:	693b      	ldr	r3, [r7, #16]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	016e3600 	.word	0x016e3600
 8002d04:	08004354 	.word	0x08004354

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000008 	.word	0x20000008

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d20:	f7ff fff2 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d24:	4601      	mov	r1, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08004370 	.word	0x08004370

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff ffde 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4601      	mov	r1, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0adb      	lsrs	r3, r3, #11
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08004370 	.word	0x08004370

08002d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d12c      	bne.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e016      	b.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6253      	str	r3, [r2, #36]	; 0x24
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002dbc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002dd0:	d105      	bne.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dd8:	d101      	bne.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 0201 	bic.w	r2, r3, #1
 8002df8:	490b      	ldr	r1, [pc, #44]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e03f      	b.n	8002ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fd24 	bl	80038a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f90b 	bl	800308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b088      	sub	sp, #32
 8002eca:	af02      	add	r7, sp, #8
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 8083 	bne.w	8002fee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Transmit+0x2e>
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e07b      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Transmit+0x40>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e074      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2221      	movs	r2, #33	; 0x21
 8002f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f83e 	bl	8000f9c <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	88fa      	ldrh	r2, [r7, #6]
 8002f26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f2e:	e042      	b.n	8002fb6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d122      	bne.n	8002f8e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f850 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e046      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3302      	adds	r3, #2
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	e017      	b.n	8002fb6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	e013      	b.n	8002fb6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f82d 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e023      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1b7      	bne.n	8002f30 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f814 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00a      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	e02c      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d028      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <UART_WaitOnFlagUntilTimeout+0x30>
 8003018:	f7fd ffc0 	bl	8000f9c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	429a      	cmp	r2, r3
 8003026:	d21d      	bcs.n	8003064 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003036:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e00f      	b.n	8003084 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	429a      	cmp	r2, r3
 8003080:	d0c3      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030cc:	f023 030c 	bic.w	r3, r3, #12
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	430b      	orrs	r3, r1
 80030d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	f040 80a5 	bne.w	8003246 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4aa4      	ldr	r2, [pc, #656]	; (8003394 <UART_SetConfig+0x308>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d14f      	bne.n	80031a6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003106:	f7ff fe1d 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 800310a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009a      	lsls	r2, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	4a9d      	ldr	r2, [pc, #628]	; (8003398 <UART_SetConfig+0x30c>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	0119      	lsls	r1, r3, #4
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009a      	lsls	r2, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003142:	4b95      	ldr	r3, [pc, #596]	; (8003398 <UART_SetConfig+0x30c>)
 8003144:	fba3 0302 	umull	r0, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2064      	movs	r0, #100	; 0x64
 800314c:	fb00 f303 	mul.w	r3, r0, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	3332      	adds	r3, #50	; 0x32
 8003156:	4a90      	ldr	r2, [pc, #576]	; (8003398 <UART_SetConfig+0x30c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003164:	4419      	add	r1, r3
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4b86      	ldr	r3, [pc, #536]	; (8003398 <UART_SetConfig+0x30c>)
 800317e:	fba3 0302 	umull	r0, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2064      	movs	r0, #100	; 0x64
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	3332      	adds	r3, #50	; 0x32
 8003190:	4a81      	ldr	r2, [pc, #516]	; (8003398 <UART_SetConfig+0x30c>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 0207 	and.w	r2, r3, #7
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	440a      	add	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031a4:	e0f1      	b.n	800338a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031a6:	f7ff fdb9 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80031aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4a75      	ldr	r2, [pc, #468]	; (8003398 <UART_SetConfig+0x30c>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	0119      	lsls	r1, r3, #4
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009a      	lsls	r2, r3, #2
 80031d6:	441a      	add	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <UART_SetConfig+0x30c>)
 80031e4:	fba3 0302 	umull	r0, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2064      	movs	r0, #100	; 0x64
 80031ec:	fb00 f303 	mul.w	r3, r0, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3332      	adds	r3, #50	; 0x32
 80031f6:	4a68      	ldr	r2, [pc, #416]	; (8003398 <UART_SetConfig+0x30c>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003204:	4419      	add	r1, r3
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <UART_SetConfig+0x30c>)
 800321e:	fba3 0302 	umull	r0, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	fb00 f303 	mul.w	r3, r0, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	3332      	adds	r3, #50	; 0x32
 8003230:	4a59      	ldr	r2, [pc, #356]	; (8003398 <UART_SetConfig+0x30c>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	f003 0207 	and.w	r2, r3, #7
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	440a      	add	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	e0a1      	b.n	800338a <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a52      	ldr	r2, [pc, #328]	; (8003394 <UART_SetConfig+0x308>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d14e      	bne.n	80032ee <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff fd78 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 8003254:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009a      	lsls	r2, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <UART_SetConfig+0x30c>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	0119      	lsls	r1, r3, #4
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fbb2 f2f3 	udiv	r2, r2, r3
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <UART_SetConfig+0x30c>)
 800328e:	fba3 0302 	umull	r0, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2064      	movs	r0, #100	; 0x64
 8003296:	fb00 f303 	mul.w	r3, r0, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	4a3d      	ldr	r2, [pc, #244]	; (8003398 <UART_SetConfig+0x30c>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ac:	4419      	add	r1, r3
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c4:	4b34      	ldr	r3, [pc, #208]	; (8003398 <UART_SetConfig+0x30c>)
 80032c6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2064      	movs	r0, #100	; 0x64
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	; 0x32
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <UART_SetConfig+0x30c>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	440a      	add	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	e04d      	b.n	800338a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ee:	f7ff fd15 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80032f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	4a23      	ldr	r2, [pc, #140]	; (8003398 <UART_SetConfig+0x30c>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	0119      	lsls	r1, r3, #4
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	fbb2 f2f3 	udiv	r2, r2, r3
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <UART_SetConfig+0x30c>)
 800332c:	fba3 0302 	umull	r0, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2064      	movs	r0, #100	; 0x64
 8003334:	fb00 f303 	mul.w	r3, r0, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a16      	ldr	r2, [pc, #88]	; (8003398 <UART_SetConfig+0x30c>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800334a:	4419      	add	r1, r3
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009a      	lsls	r2, r3, #2
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <UART_SetConfig+0x30c>)
 8003364:	fba3 0302 	umull	r0, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2064      	movs	r0, #100	; 0x64
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	3332      	adds	r3, #50	; 0x32
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <UART_SetConfig+0x30c>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	440a      	add	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40013800 	.word	0x40013800
 8003398:	51eb851f 	.word	0x51eb851f
 800339c:	00000000 	.word	0x00000000

080033a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b091      	sub	sp, #68	; 0x44
 80033a4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a6:	f7fd fd95 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033aa:	f000 f90d 	bl	80035c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ae:	f000 f9ab 	bl	8003708 <MX_GPIO_Init>
  //Turn on sensors
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80033b2:	2201      	movs	r2, #1
 80033b4:	2101      	movs	r1, #1
 80033b6:	4878      	ldr	r0, [pc, #480]	; (8003598 <main+0x1f8>)
 80033b8:	f7fe f87e 	bl	80014b8 <HAL_GPIO_WritePin>
  MX_I2C1_Init();
 80033bc:	f000 f94c 	bl	8003658 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80033c0:	f000 f978 	bl	80036b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  	   uint8_t buf[4]={0,0,0,0};
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
  	   uint8_t dec=0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  	   float temp_dec =0;
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN WHILE */
	   while (1)
	   {

		   //Configure résolution
		   buf[0]=POINTEREG_config;
 80033d4:	4b71      	ldr	r3, [pc, #452]	; (800359c <main+0x1fc>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f887 3020 	strb.w	r3, [r7, #32]
		   HAL_I2C_Master_Transmit(&hi2c1, capteurtemp_ADDR, buf, 1,HAL_MAX_DELAY);
 80033dc:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <main+0x200>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b299      	uxth	r1, r3
 80033e2:	f107 0220 	add.w	r2, r7, #32
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2301      	movs	r3, #1
 80033ee:	486d      	ldr	r0, [pc, #436]	; (80035a4 <main+0x204>)
 80033f0:	f7fe f9a2 	bl	8001738 <HAL_I2C_Master_Transmit>
		   buf[0]=CONFIG_12BITRES;
 80033f4:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <main+0x208>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f887 3020 	strb.w	r3, [r7, #32]
		   HAL_I2C_Master_Transmit(&hi2c1, capteurtemp_ADDR, buf, 1,HAL_MAX_DELAY);
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <main+0x200>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b299      	uxth	r1, r3
 8003402:	f107 0220 	add.w	r2, r7, #32
 8003406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2301      	movs	r3, #1
 800340e:	4865      	ldr	r0, [pc, #404]	; (80035a4 <main+0x204>)
 8003410:	f7fe f992 	bl	8001738 <HAL_I2C_Master_Transmit>

		   //Lecture température
		   buf[0] =POINTEREG_temp;
 8003414:	4b65      	ldr	r3, [pc, #404]	; (80035ac <main+0x20c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f887 3020 	strb.w	r3, [r7, #32]
		   HAL_I2C_Master_Transmit(&hi2c1, capteurtemp_ADDR, buf, 1,HAL_MAX_DELAY);
 800341c:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <main+0x200>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b299      	uxth	r1, r3
 8003422:	f107 0220 	add.w	r2, r7, #32
 8003426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	485d      	ldr	r0, [pc, #372]	; (80035a4 <main+0x204>)
 8003430:	f7fe f982 	bl	8001738 <HAL_I2C_Master_Transmit>


		   buf[0] =LIRETEMP ;
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <main+0x210>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f887 3020 	strb.w	r3, [r7, #32]
		   HAL_I2C_Master_Transmit(&hi2c1, capteurtemp_ADDR, buf, 1,HAL_MAX_DELAY);
 800343c:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <main+0x200>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b299      	uxth	r1, r3
 8003442:	f107 0220 	add.w	r2, r7, #32
 8003446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2301      	movs	r3, #1
 800344e:	4855      	ldr	r0, [pc, #340]	; (80035a4 <main+0x204>)
 8003450:	f7fe f972 	bl	8001738 <HAL_I2C_Master_Transmit>

		   HAL_I2C_Master_Receive(&hi2c1, capteurtemp_ADDR, buf, 2,HAL_MAX_DELAY);
 8003454:	4b52      	ldr	r3, [pc, #328]	; (80035a0 <main+0x200>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b299      	uxth	r1, r3
 800345a:	f107 0220 	add.w	r2, r7, #32
 800345e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2302      	movs	r3, #2
 8003466:	484f      	ldr	r0, [pc, #316]	; (80035a4 <main+0x204>)
 8003468:	f7fe fa64 	bl	8001934 <HAL_I2C_Master_Receive>



		   //Conversion °C
		   //Cplt à 2 valeurs négatives
		   int8_t temp =buf[0];
 800346c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		   temp = (temp & 0x80) ? temp | 0xFFFF : temp;
 8003474:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003478:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800347c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		   //Partie décimale
		   if(buf[1]==128){
 8003480:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d103      	bne.n	8003490 <main+0xf0>

			   dec=5;
 8003488:	2305      	movs	r3, #5
 800348a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800348e:	e002      	b.n	8003496 <main+0xf6>

		   }

		   else{
			   dec=0;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		   }


		   if(dec!=0){
 8003496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <main+0x124>


			   temp_dec=temp+0.5;
 800349e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fc ffc6 	bl	8000434 <__aeabi_i2d>
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <main+0x214>)
 80034ae:	f7fc fe75 	bl	800019c <__adddf3>
 80034b2:	4603      	mov	r3, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	4618      	mov	r0, r3
 80034b8:	4621      	mov	r1, r4
 80034ba:	f7fd fa37 	bl	800092c <__aeabi_d2f>
 80034be:	4603      	mov	r3, r0
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
 80034c2:	e006      	b.n	80034d2 <main+0x132>


		   }
		   else{

			   temp_dec=temp;
 80034c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fb39 	bl	8000b40 <__aeabi_i2f>
 80034ce:	4603      	mov	r3, r0
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
		   }

		   //Conversion F


		   float f=(temp_dec)*1.8+32;
 80034d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d4:	f7fc ffc0 	bl	8000458 <__aeabi_f2d>
 80034d8:	a32d      	add	r3, pc, #180	; (adr r3, 8003590 <main+0x1f0>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fd f813 	bl	8000508 <__aeabi_dmul>
 80034e2:	4603      	mov	r3, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	4618      	mov	r0, r3
 80034e8:	4621      	mov	r1, r4
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <main+0x218>)
 80034f0:	f7fc fe54 	bl	800019c <__adddf3>
 80034f4:	4603      	mov	r3, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	4618      	mov	r0, r3
 80034fa:	4621      	mov	r1, r4
 80034fc:	f7fd fa16 	bl	800092c <__aeabi_d2f>
 8003500:	4603      	mov	r3, r0
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
		   int8_t f_ent = (int8_t)f;
 8003504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003506:	f7fd fcbf 	bl	8000e88 <__aeabi_f2iz>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		   int8_t f_dec = 100*f-f_ent*100;
 8003510:	492a      	ldr	r1, [pc, #168]	; (80035bc <main+0x21c>)
 8003512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003514:	f7fd fb68 	bl	8000be8 <__aeabi_fmul>
 8003518:	4603      	mov	r3, r0
 800351a:	461c      	mov	r4, r3
 800351c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003520:	2264      	movs	r2, #100	; 0x64
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fb0a 	bl	8000b40 <__aeabi_i2f>
 800352c:	4603      	mov	r3, r0
 800352e:	4619      	mov	r1, r3
 8003530:	4620      	mov	r0, r4
 8003532:	f7fd fa4f 	bl	80009d4 <__aeabi_fsub>
 8003536:	4603      	mov	r3, r0
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fca5 	bl	8000e88 <__aeabi_f2iz>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26



		   uint8_t string_message[29];
		   sprintf(string_message,"Température : %d.%d °C | %d.%d °F\n\r", temp,dec,f_ent,f_dec);
 8003544:	f997 102f 	ldrsb.w	r1, [r7, #47]	; 0x2f
 8003548:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800354c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003550:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8003554:	4638      	mov	r0, r7
 8003556:	9201      	str	r2, [sp, #4]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4623      	mov	r3, r4
 800355c:	460a      	mov	r2, r1
 800355e:	4918      	ldr	r1, [pc, #96]	; (80035c0 <main+0x220>)
 8003560:	f000 fac4 	bl	8003aec <siprintf>
		   uint8_t len = strlen(string_message);
 8003564:	463b      	mov	r3, r7
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc fe0a 	bl	8000180 <strlen>
 800356c:	4603      	mov	r3, r0
 800356e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		   HAL_UART_Transmit(&huart1, string_message,len , HAL_MAX_DELAY);
 8003572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003576:	b29a      	uxth	r2, r3
 8003578:	4639      	mov	r1, r7
 800357a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800357e:	4811      	ldr	r0, [pc, #68]	; (80035c4 <main+0x224>)
 8003580:	f7ff fca1 	bl	8002ec6 <HAL_UART_Transmit>



	     HAL_Delay(1000);
 8003584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003588:	f7fd fd12 	bl	8000fb0 <HAL_Delay>
	   {
 800358c:	e722      	b.n	80033d4 <main+0x34>
 800358e:	bf00      	nop
 8003590:	cccccccd 	.word	0xcccccccd
 8003594:	3ffccccc 	.word	0x3ffccccc
 8003598:	40020400 	.word	0x40020400
 800359c:	0800434f 	.word	0x0800434f
 80035a0:	08004350 	.word	0x08004350
 80035a4:	2000009c 	.word	0x2000009c
 80035a8:	08004351 	.word	0x08004351
 80035ac:	08004352 	.word	0x08004352
 80035b0:	08004353 	.word	0x08004353
 80035b4:	3fe00000 	.word	0x3fe00000
 80035b8:	40400000 	.word	0x40400000
 80035bc:	42c80000 	.word	0x42c80000
 80035c0:	08004328 	.word	0x08004328
 80035c4:	200000f0 	.word	0x200000f0

080035c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b092      	sub	sp, #72	; 0x48
 80035cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	2234      	movs	r2, #52	; 0x34
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fa80 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035dc:	463b      	mov	r3, r7
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <SystemClock_Config+0x8c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <SystemClock_Config+0x8c>)
 80035f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035f8:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80035fa:	2310      	movs	r3, #16
 80035fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80035fe:	2301      	movs	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003606:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800360c:	2300      	movs	r3, #0
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003610:	f107 0314 	add.w	r3, r7, #20
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe febb 	bl	8002390 <HAL_RCC_OscConfig>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003620:	f000 f8c6 	bl	80037b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003624:	230f      	movs	r3, #15
 8003626:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003628:	2300      	movs	r3, #0
 800362a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003638:	463b      	mov	r3, r7
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f9d7 	bl	80029f0 <HAL_RCC_ClockConfig>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003648:	f000 f8b2 	bl	80037b0 <Error_Handler>
  }
}
 800364c:	bf00      	nop
 800364e:	3748      	adds	r7, #72	; 0x48
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40007000 	.word	0x40007000

08003658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <MX_I2C1_Init+0x50>)
 800365e:	4a13      	ldr	r2, [pc, #76]	; (80036ac <MX_I2C1_Init+0x54>)
 8003660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <MX_I2C1_Init+0x50>)
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <MX_I2C1_Init+0x58>)
 8003666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <MX_I2C1_Init+0x50>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_I2C1_Init+0x50>)
 8003670:	2200      	movs	r2, #0
 8003672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_I2C1_Init+0x50>)
 8003676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800367a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <MX_I2C1_Init+0x50>)
 800367e:	2200      	movs	r2, #0
 8003680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_I2C1_Init+0x50>)
 8003684:	2200      	movs	r2, #0
 8003686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <MX_I2C1_Init+0x50>)
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_I2C1_Init+0x50>)
 8003690:	2200      	movs	r2, #0
 8003692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003694:	4804      	ldr	r0, [pc, #16]	; (80036a8 <MX_I2C1_Init+0x50>)
 8003696:	f7fd ff27 	bl	80014e8 <HAL_I2C_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036a0:	f000 f886 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	2000009c 	.word	0x2000009c
 80036ac:	40005400 	.word	0x40005400
 80036b0:	000186a0 	.word	0x000186a0

080036b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <MX_USART1_UART_Init+0x50>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <MX_USART1_UART_Init+0x4c>)
 80036ec:	f7ff fb9e 	bl	8002e2c <HAL_UART_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036f6:	f000 f85b 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200000f0 	.word	0x200000f0
 8003704:	40013800 	.word	0x40013800

08003708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	60da      	str	r2, [r3, #12]
 800371c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <MX_GPIO_Init+0x9c>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <MX_GPIO_Init+0x9c>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	61d3      	str	r3, [r2, #28]
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <MX_GPIO_Init+0x9c>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <MX_GPIO_Init+0x9c>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <MX_GPIO_Init+0x9c>)
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <MX_GPIO_Init+0x9c>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800374e:	2200      	movs	r2, #0
 8003750:	2110      	movs	r1, #16
 8003752:	4815      	ldr	r0, [pc, #84]	; (80037a8 <MX_GPIO_Init+0xa0>)
 8003754:	f7fd feb0 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003758:	2200      	movs	r2, #0
 800375a:	2101      	movs	r1, #1
 800375c:	4813      	ldr	r0, [pc, #76]	; (80037ac <MX_GPIO_Init+0xa4>)
 800375e:	f7fd feab 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003762:	2310      	movs	r3, #16
 8003764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003766:	2301      	movs	r3, #1
 8003768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	4619      	mov	r1, r3
 8003778:	480b      	ldr	r0, [pc, #44]	; (80037a8 <MX_GPIO_Init+0xa0>)
 800377a:	f7fd fd1f 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800377e:	2301      	movs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003782:	2301      	movs	r3, #1
 8003784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_GPIO_Init+0xa4>)
 8003796:	f7fd fd11 	bl	80011bc <HAL_GPIO_Init>

}
 800379a:	bf00      	nop
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40020000 	.word	0x40020000
 80037ac:	40020400 	.word	0x40020400

080037b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_MspInit+0x58>)
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_MspInit+0x58>)
 80037c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	6253      	str	r3, [r2, #36]	; 0x24
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_MspInit+0x58>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_MspInit+0x58>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_MspInit+0x58>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_MspInit+0x58>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_MspInit+0x58>)
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_MspInit+0x58>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6253      	str	r3, [r2, #36]	; 0x24
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_MspInit+0x58>)
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a17      	ldr	r2, [pc, #92]	; (8003894 <HAL_I2C_MspInit+0x7c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d128      	bne.n	800388c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_I2C_MspInit+0x80>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_I2C_MspInit+0x80>)
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	61d3      	str	r3, [r2, #28]
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <HAL_I2C_MspInit+0x80>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003852:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003858:	2312      	movs	r3, #18
 800385a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800385c:	2301      	movs	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003864:	2304      	movs	r3, #4
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	4619      	mov	r1, r3
 800386e:	480b      	ldr	r0, [pc, #44]	; (800389c <HAL_I2C_MspInit+0x84>)
 8003870:	f7fd fca4 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_I2C_MspInit+0x80>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_I2C_MspInit+0x80>)
 800387a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800387e:	6253      	str	r3, [r2, #36]	; 0x24
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_I2C_MspInit+0x80>)
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40005400 	.word	0x40005400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020400 	.word	0x40020400

080038a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_UART_MspInit+0x7c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d127      	bne.n	8003912 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_UART_MspInit+0x80>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_UART_MspInit+0x80>)
 80038c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038cc:	6213      	str	r3, [r2, #32]
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_UART_MspInit+0x80>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_UART_MspInit+0x80>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_UART_MspInit+0x80>)
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	61d3      	str	r3, [r2, #28]
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_UART_MspInit+0x80>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038f2:	23c0      	movs	r3, #192	; 0xc0
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003902:	2307      	movs	r3, #7
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	4805      	ldr	r0, [pc, #20]	; (8003924 <HAL_UART_MspInit+0x84>)
 800390e:	f7fd fc55 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40013800 	.word	0x40013800
 8003920:	40023800 	.word	0x40023800
 8003924:	40020400 	.word	0x40020400

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <HardFault_Handler+0x4>

0800393a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <MemManage_Handler+0x4>

08003940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <BusFault_Handler+0x4>

08003946 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <UsageFault_Handler+0x4>

0800394c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003974:	f7fd fb00 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}

0800397c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <_sbrk+0x50>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <_sbrk+0x16>
		heap_end = &end;
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <_sbrk+0x50>)
 800398e:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <_sbrk+0x54>)
 8003990:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <_sbrk+0x50>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <_sbrk+0x50>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	466a      	mov	r2, sp
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d907      	bls.n	80039b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80039a6:	f000 f86f 	bl	8003a88 <__errno>
 80039aa:	4602      	mov	r2, r0
 80039ac:	230c      	movs	r3, #12
 80039ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b4:	e006      	b.n	80039c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <_sbrk+0x50>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	4a03      	ldr	r2, [pc, #12]	; (80039cc <_sbrk+0x50>)
 80039c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000008c 	.word	0x2000008c
 80039d0:	20000138 	.word	0x20000138

080039d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <SystemInit+0x5c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <SystemInit+0x5c>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <SystemInit+0x5c>)
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4911      	ldr	r1, [pc, #68]	; (8003a30 <SystemInit+0x5c>)
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <SystemInit+0x60>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <SystemInit+0x5c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <SystemInit+0x5c>)
 80039f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80039fa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80039fe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <SystemInit+0x5c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <SystemInit+0x5c>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <SystemInit+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <SystemInit+0x5c>)
 8003a12:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8003a16:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <SystemInit+0x5c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <SystemInit+0x64>)
 8003a20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a24:	609a      	str	r2, [r3, #8]
#endif
}
 8003a26:	bf00      	nop
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	88ffc00c 	.word	0x88ffc00c
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a3e:	e003      	b.n	8003a48 <LoopCopyDataInit>

08003a40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a46:	3104      	adds	r1, #4

08003a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a48:	480a      	ldr	r0, [pc, #40]	; (8003a74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a50:	d3f6      	bcc.n	8003a40 <CopyDataInit>
  ldr r2, =_sbss
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a54:	e002      	b.n	8003a5c <LoopFillZerobss>

08003a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a58:	f842 3b04 	str.w	r3, [r2], #4

08003a5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a60:	d3f9      	bcc.n	8003a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a62:	f7ff ffb7 	bl	80039d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a66:	f000 f815 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a6a:	f7ff fc99 	bl	80033a0 <main>
  bx lr
 8003a6e:	4770      	bx	lr
  ldr r3, =_sidata
 8003a70:	080043b4 	.word	0x080043b4
  ldr r0, =_sdata
 8003a74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a78:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003a7c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003a80:	20000134 	.word	0x20000134

08003a84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a84:	e7fe      	b.n	8003a84 <ADC1_IRQHandler>
	...

08003a88 <__errno>:
 8003a88:	4b01      	ldr	r3, [pc, #4]	; (8003a90 <__errno+0x8>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000000c 	.word	0x2000000c

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	2500      	movs	r5, #0
 8003a98:	4e0c      	ldr	r6, [pc, #48]	; (8003acc <__libc_init_array+0x38>)
 8003a9a:	4c0d      	ldr	r4, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9c:	1ba4      	subs	r4, r4, r6
 8003a9e:	10a4      	asrs	r4, r4, #2
 8003aa0:	42a5      	cmp	r5, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	f000 fc34 	bl	8004310 <_init>
 8003aa8:	2500      	movs	r5, #0
 8003aaa:	4e0a      	ldr	r6, [pc, #40]	; (8003ad4 <__libc_init_array+0x40>)
 8003aac:	4c0a      	ldr	r4, [pc, #40]	; (8003ad8 <__libc_init_array+0x44>)
 8003aae:	1ba4      	subs	r4, r4, r6
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	42a5      	cmp	r5, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003abc:	4798      	blx	r3
 8003abe:	3501      	adds	r5, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac6:	4798      	blx	r3
 8003ac8:	3501      	adds	r5, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	080043ac 	.word	0x080043ac
 8003ad0:	080043ac 	.word	0x080043ac
 8003ad4:	080043ac 	.word	0x080043ac
 8003ad8:	080043b0 	.word	0x080043b0

08003adc <memset>:
 8003adc:	4603      	mov	r3, r0
 8003ade:	4402      	add	r2, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <siprintf>:
 8003aec:	b40e      	push	{r1, r2, r3}
 8003aee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003af2:	b500      	push	{lr}
 8003af4:	b09c      	sub	sp, #112	; 0x70
 8003af6:	ab1d      	add	r3, sp, #116	; 0x74
 8003af8:	9002      	str	r0, [sp, #8]
 8003afa:	9006      	str	r0, [sp, #24]
 8003afc:	9107      	str	r1, [sp, #28]
 8003afe:	9104      	str	r1, [sp, #16]
 8003b00:	4808      	ldr	r0, [pc, #32]	; (8003b24 <siprintf+0x38>)
 8003b02:	4909      	ldr	r1, [pc, #36]	; (8003b28 <siprintf+0x3c>)
 8003b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b08:	9105      	str	r1, [sp, #20]
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	a902      	add	r1, sp, #8
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	f000 f866 	bl	8003be0 <_svfiprintf_r>
 8003b14:	2200      	movs	r2, #0
 8003b16:	9b02      	ldr	r3, [sp, #8]
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	b01c      	add	sp, #112	; 0x70
 8003b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b20:	b003      	add	sp, #12
 8003b22:	4770      	bx	lr
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	ffff0208 	.word	0xffff0208

08003b2c <__ssputs_r>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	688e      	ldr	r6, [r1, #8]
 8003b32:	4682      	mov	sl, r0
 8003b34:	429e      	cmp	r6, r3
 8003b36:	460c      	mov	r4, r1
 8003b38:	4690      	mov	r8, r2
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	d837      	bhi.n	8003bae <__ssputs_r+0x82>
 8003b3e:	898a      	ldrh	r2, [r1, #12]
 8003b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b44:	d031      	beq.n	8003baa <__ssputs_r+0x7e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	6909      	ldr	r1, [r1, #16]
 8003b4c:	1a6f      	subs	r7, r5, r1
 8003b4e:	6965      	ldr	r5, [r4, #20]
 8003b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b54:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b58:	f109 0301 	add.w	r3, r9, #1
 8003b5c:	443b      	add	r3, r7
 8003b5e:	429d      	cmp	r5, r3
 8003b60:	bf38      	it	cc
 8003b62:	461d      	movcc	r5, r3
 8003b64:	0553      	lsls	r3, r2, #21
 8003b66:	d530      	bpl.n	8003bca <__ssputs_r+0x9e>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f000 fb37 	bl	80041dc <_malloc_r>
 8003b6e:	4606      	mov	r6, r0
 8003b70:	b950      	cbnz	r0, 8003b88 <__ssputs_r+0x5c>
 8003b72:	230c      	movs	r3, #12
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b78:	f8ca 3000 	str.w	r3, [sl]
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b82:	81a3      	strh	r3, [r4, #12]
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	463a      	mov	r2, r7
 8003b8a:	6921      	ldr	r1, [r4, #16]
 8003b8c:	f000 fab6 	bl	80040fc <memcpy>
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	6126      	str	r6, [r4, #16]
 8003b9e:	443e      	add	r6, r7
 8003ba0:	6026      	str	r6, [r4, #0]
 8003ba2:	464e      	mov	r6, r9
 8003ba4:	6165      	str	r5, [r4, #20]
 8003ba6:	1bed      	subs	r5, r5, r7
 8003ba8:	60a5      	str	r5, [r4, #8]
 8003baa:	454e      	cmp	r6, r9
 8003bac:	d900      	bls.n	8003bb0 <__ssputs_r+0x84>
 8003bae:	464e      	mov	r6, r9
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	6820      	ldr	r0, [r4, #0]
 8003bb6:	f000 faac 	bl	8004112 <memmove>
 8003bba:	68a3      	ldr	r3, [r4, #8]
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	1b9b      	subs	r3, r3, r6
 8003bc0:	60a3      	str	r3, [r4, #8]
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	441e      	add	r6, r3
 8003bc6:	6026      	str	r6, [r4, #0]
 8003bc8:	e7dc      	b.n	8003b84 <__ssputs_r+0x58>
 8003bca:	462a      	mov	r2, r5
 8003bcc:	f000 fb60 	bl	8004290 <_realloc_r>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d1e2      	bne.n	8003b9c <__ssputs_r+0x70>
 8003bd6:	6921      	ldr	r1, [r4, #16]
 8003bd8:	4650      	mov	r0, sl
 8003bda:	f000 fab3 	bl	8004144 <_free_r>
 8003bde:	e7c8      	b.n	8003b72 <__ssputs_r+0x46>

08003be0 <_svfiprintf_r>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	461d      	mov	r5, r3
 8003be6:	898b      	ldrh	r3, [r1, #12]
 8003be8:	b09d      	sub	sp, #116	; 0x74
 8003bea:	061f      	lsls	r7, r3, #24
 8003bec:	4680      	mov	r8, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	d50f      	bpl.n	8003c14 <_svfiprintf_r+0x34>
 8003bf4:	690b      	ldr	r3, [r1, #16]
 8003bf6:	b96b      	cbnz	r3, 8003c14 <_svfiprintf_r+0x34>
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	f000 faef 	bl	80041dc <_malloc_r>
 8003bfe:	6020      	str	r0, [r4, #0]
 8003c00:	6120      	str	r0, [r4, #16]
 8003c02:	b928      	cbnz	r0, 8003c10 <_svfiprintf_r+0x30>
 8003c04:	230c      	movs	r3, #12
 8003c06:	f8c8 3000 	str.w	r3, [r8]
 8003c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c0e:	e0c8      	b.n	8003da2 <_svfiprintf_r+0x1c2>
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	6163      	str	r3, [r4, #20]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9309      	str	r3, [sp, #36]	; 0x24
 8003c18:	2320      	movs	r3, #32
 8003c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c1e:	2330      	movs	r3, #48	; 0x30
 8003c20:	f04f 0b01 	mov.w	fp, #1
 8003c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c28:	9503      	str	r5, [sp, #12]
 8003c2a:	4637      	mov	r7, r6
 8003c2c:	463d      	mov	r5, r7
 8003c2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c32:	b10b      	cbz	r3, 8003c38 <_svfiprintf_r+0x58>
 8003c34:	2b25      	cmp	r3, #37	; 0x25
 8003c36:	d13e      	bne.n	8003cb6 <_svfiprintf_r+0xd6>
 8003c38:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c3c:	d00b      	beq.n	8003c56 <_svfiprintf_r+0x76>
 8003c3e:	4653      	mov	r3, sl
 8003c40:	4632      	mov	r2, r6
 8003c42:	4621      	mov	r1, r4
 8003c44:	4640      	mov	r0, r8
 8003c46:	f7ff ff71 	bl	8003b2c <__ssputs_r>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	f000 80a4 	beq.w	8003d98 <_svfiprintf_r+0x1b8>
 8003c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c52:	4453      	add	r3, sl
 8003c54:	9309      	str	r3, [sp, #36]	; 0x24
 8003c56:	783b      	ldrb	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 809d 	beq.w	8003d98 <_svfiprintf_r+0x1b8>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	9307      	str	r3, [sp, #28]
 8003c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c70:	931a      	str	r3, [sp, #104]	; 0x68
 8003c72:	462f      	mov	r7, r5
 8003c74:	2205      	movs	r2, #5
 8003c76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c7a:	4850      	ldr	r0, [pc, #320]	; (8003dbc <_svfiprintf_r+0x1dc>)
 8003c7c:	f000 fa30 	bl	80040e0 <memchr>
 8003c80:	9b04      	ldr	r3, [sp, #16]
 8003c82:	b9d0      	cbnz	r0, 8003cba <_svfiprintf_r+0xda>
 8003c84:	06d9      	lsls	r1, r3, #27
 8003c86:	bf44      	itt	mi
 8003c88:	2220      	movmi	r2, #32
 8003c8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c8e:	071a      	lsls	r2, r3, #28
 8003c90:	bf44      	itt	mi
 8003c92:	222b      	movmi	r2, #43	; 0x2b
 8003c94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c98:	782a      	ldrb	r2, [r5, #0]
 8003c9a:	2a2a      	cmp	r2, #42	; 0x2a
 8003c9c:	d015      	beq.n	8003cca <_svfiprintf_r+0xea>
 8003c9e:	462f      	mov	r7, r5
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	250a      	movs	r5, #10
 8003ca4:	9a07      	ldr	r2, [sp, #28]
 8003ca6:	4639      	mov	r1, r7
 8003ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cac:	3b30      	subs	r3, #48	; 0x30
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	d94d      	bls.n	8003d4e <_svfiprintf_r+0x16e>
 8003cb2:	b1b8      	cbz	r0, 8003ce4 <_svfiprintf_r+0x104>
 8003cb4:	e00f      	b.n	8003cd6 <_svfiprintf_r+0xf6>
 8003cb6:	462f      	mov	r7, r5
 8003cb8:	e7b8      	b.n	8003c2c <_svfiprintf_r+0x4c>
 8003cba:	4a40      	ldr	r2, [pc, #256]	; (8003dbc <_svfiprintf_r+0x1dc>)
 8003cbc:	463d      	mov	r5, r7
 8003cbe:	1a80      	subs	r0, r0, r2
 8003cc0:	fa0b f000 	lsl.w	r0, fp, r0
 8003cc4:	4318      	orrs	r0, r3
 8003cc6:	9004      	str	r0, [sp, #16]
 8003cc8:	e7d3      	b.n	8003c72 <_svfiprintf_r+0x92>
 8003cca:	9a03      	ldr	r2, [sp, #12]
 8003ccc:	1d11      	adds	r1, r2, #4
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	9103      	str	r1, [sp, #12]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	db01      	blt.n	8003cda <_svfiprintf_r+0xfa>
 8003cd6:	9207      	str	r2, [sp, #28]
 8003cd8:	e004      	b.n	8003ce4 <_svfiprintf_r+0x104>
 8003cda:	4252      	negs	r2, r2
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	9207      	str	r2, [sp, #28]
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	783b      	ldrb	r3, [r7, #0]
 8003ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce8:	d10c      	bne.n	8003d04 <_svfiprintf_r+0x124>
 8003cea:	787b      	ldrb	r3, [r7, #1]
 8003cec:	2b2a      	cmp	r3, #42	; 0x2a
 8003cee:	d133      	bne.n	8003d58 <_svfiprintf_r+0x178>
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	3702      	adds	r7, #2
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	9203      	str	r2, [sp, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bfb8      	it	lt
 8003cfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d02:	9305      	str	r3, [sp, #20]
 8003d04:	4d2e      	ldr	r5, [pc, #184]	; (8003dc0 <_svfiprintf_r+0x1e0>)
 8003d06:	2203      	movs	r2, #3
 8003d08:	7839      	ldrb	r1, [r7, #0]
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 f9e8 	bl	80040e0 <memchr>
 8003d10:	b138      	cbz	r0, 8003d22 <_svfiprintf_r+0x142>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	1b40      	subs	r0, r0, r5
 8003d16:	fa03 f000 	lsl.w	r0, r3, r0
 8003d1a:	9b04      	ldr	r3, [sp, #16]
 8003d1c:	3701      	adds	r7, #1
 8003d1e:	4303      	orrs	r3, r0
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	7839      	ldrb	r1, [r7, #0]
 8003d24:	2206      	movs	r2, #6
 8003d26:	4827      	ldr	r0, [pc, #156]	; (8003dc4 <_svfiprintf_r+0x1e4>)
 8003d28:	1c7e      	adds	r6, r7, #1
 8003d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d2e:	f000 f9d7 	bl	80040e0 <memchr>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d038      	beq.n	8003da8 <_svfiprintf_r+0x1c8>
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <_svfiprintf_r+0x1e8>)
 8003d38:	bb13      	cbnz	r3, 8003d80 <_svfiprintf_r+0x1a0>
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	3307      	adds	r3, #7
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	3308      	adds	r3, #8
 8003d44:	9303      	str	r3, [sp, #12]
 8003d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d48:	444b      	add	r3, r9
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	e76d      	b.n	8003c2a <_svfiprintf_r+0x4a>
 8003d4e:	fb05 3202 	mla	r2, r5, r2, r3
 8003d52:	2001      	movs	r0, #1
 8003d54:	460f      	mov	r7, r1
 8003d56:	e7a6      	b.n	8003ca6 <_svfiprintf_r+0xc6>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	250a      	movs	r5, #10
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	3701      	adds	r7, #1
 8003d60:	9305      	str	r3, [sp, #20]
 8003d62:	4638      	mov	r0, r7
 8003d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d68:	3a30      	subs	r2, #48	; 0x30
 8003d6a:	2a09      	cmp	r2, #9
 8003d6c:	d903      	bls.n	8003d76 <_svfiprintf_r+0x196>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0c8      	beq.n	8003d04 <_svfiprintf_r+0x124>
 8003d72:	9105      	str	r1, [sp, #20]
 8003d74:	e7c6      	b.n	8003d04 <_svfiprintf_r+0x124>
 8003d76:	fb05 2101 	mla	r1, r5, r1, r2
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4607      	mov	r7, r0
 8003d7e:	e7f0      	b.n	8003d62 <_svfiprintf_r+0x182>
 8003d80:	ab03      	add	r3, sp, #12
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4622      	mov	r2, r4
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003d88:	a904      	add	r1, sp, #16
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f3af 8000 	nop.w
 8003d90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003d94:	4681      	mov	r9, r0
 8003d96:	d1d6      	bne.n	8003d46 <_svfiprintf_r+0x166>
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	065b      	lsls	r3, r3, #25
 8003d9c:	f53f af35 	bmi.w	8003c0a <_svfiprintf_r+0x2a>
 8003da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003da2:	b01d      	add	sp, #116	; 0x74
 8003da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da8:	ab03      	add	r3, sp, #12
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4622      	mov	r2, r4
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003db0:	a904      	add	r1, sp, #16
 8003db2:	4640      	mov	r0, r8
 8003db4:	f000 f882 	bl	8003ebc <_printf_i>
 8003db8:	e7ea      	b.n	8003d90 <_svfiprintf_r+0x1b0>
 8003dba:	bf00      	nop
 8003dbc:	08004378 	.word	0x08004378
 8003dc0:	0800437e 	.word	0x0800437e
 8003dc4:	08004382 	.word	0x08004382
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	08003b2d 	.word	0x08003b2d

08003dd0 <_printf_common>:
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	4691      	mov	r9, r2
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	688a      	ldr	r2, [r1, #8]
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	4606      	mov	r6, r0
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bfb8      	it	lt
 8003de2:	4613      	movlt	r3, r2
 8003de4:	f8c9 3000 	str.w	r3, [r9]
 8003de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dec:	460c      	mov	r4, r1
 8003dee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003df2:	b112      	cbz	r2, 8003dfa <_printf_common+0x2a>
 8003df4:	3301      	adds	r3, #1
 8003df6:	f8c9 3000 	str.w	r3, [r9]
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	0699      	lsls	r1, r3, #26
 8003dfe:	bf42      	ittt	mi
 8003e00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e04:	3302      	addmi	r3, #2
 8003e06:	f8c9 3000 	strmi.w	r3, [r9]
 8003e0a:	6825      	ldr	r5, [r4, #0]
 8003e0c:	f015 0506 	ands.w	r5, r5, #6
 8003e10:	d107      	bne.n	8003e22 <_printf_common+0x52>
 8003e12:	f104 0a19 	add.w	sl, r4, #25
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	f8d9 2000 	ldr.w	r2, [r9]
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	42ab      	cmp	r3, r5
 8003e20:	dc29      	bgt.n	8003e76 <_printf_common+0xa6>
 8003e22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	3300      	adds	r3, #0
 8003e2a:	bf18      	it	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	0692      	lsls	r2, r2, #26
 8003e30:	d42e      	bmi.n	8003e90 <_printf_common+0xc0>
 8003e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e36:	4639      	mov	r1, r7
 8003e38:	4630      	mov	r0, r6
 8003e3a:	47c0      	blx	r8
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d021      	beq.n	8003e84 <_printf_common+0xb4>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	68e5      	ldr	r5, [r4, #12]
 8003e44:	f003 0306 	and.w	r3, r3, #6
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	bf18      	it	ne
 8003e4c:	2500      	movne	r5, #0
 8003e4e:	f8d9 2000 	ldr.w	r2, [r9]
 8003e52:	f04f 0900 	mov.w	r9, #0
 8003e56:	bf08      	it	eq
 8003e58:	1aad      	subeq	r5, r5, r2
 8003e5a:	68a3      	ldr	r3, [r4, #8]
 8003e5c:	6922      	ldr	r2, [r4, #16]
 8003e5e:	bf08      	it	eq
 8003e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bfc4      	itt	gt
 8003e68:	1a9b      	subgt	r3, r3, r2
 8003e6a:	18ed      	addgt	r5, r5, r3
 8003e6c:	341a      	adds	r4, #26
 8003e6e:	454d      	cmp	r5, r9
 8003e70:	d11a      	bne.n	8003ea8 <_printf_common+0xd8>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e008      	b.n	8003e88 <_printf_common+0xb8>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4652      	mov	r2, sl
 8003e7a:	4639      	mov	r1, r7
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	47c0      	blx	r8
 8003e80:	3001      	adds	r0, #1
 8003e82:	d103      	bne.n	8003e8c <_printf_common+0xbc>
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8c:	3501      	adds	r5, #1
 8003e8e:	e7c2      	b.n	8003e16 <_printf_common+0x46>
 8003e90:	2030      	movs	r0, #48	; 0x30
 8003e92:	18e1      	adds	r1, r4, r3
 8003e94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e9e:	4422      	add	r2, r4
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ea6:	e7c4      	b.n	8003e32 <_printf_common+0x62>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4639      	mov	r1, r7
 8003eae:	4630      	mov	r0, r6
 8003eb0:	47c0      	blx	r8
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0e6      	beq.n	8003e84 <_printf_common+0xb4>
 8003eb6:	f109 0901 	add.w	r9, r9, #1
 8003eba:	e7d8      	b.n	8003e6e <_printf_common+0x9e>

08003ebc <_printf_i>:
 8003ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ec0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	7e09      	ldrb	r1, [r1, #24]
 8003ec8:	b085      	sub	sp, #20
 8003eca:	296e      	cmp	r1, #110	; 0x6e
 8003ecc:	4617      	mov	r7, r2
 8003ece:	4606      	mov	r6, r0
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ed4:	f000 80b3 	beq.w	800403e <_printf_i+0x182>
 8003ed8:	d822      	bhi.n	8003f20 <_printf_i+0x64>
 8003eda:	2963      	cmp	r1, #99	; 0x63
 8003edc:	d036      	beq.n	8003f4c <_printf_i+0x90>
 8003ede:	d80a      	bhi.n	8003ef6 <_printf_i+0x3a>
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	f000 80b9 	beq.w	8004058 <_printf_i+0x19c>
 8003ee6:	2958      	cmp	r1, #88	; 0x58
 8003ee8:	f000 8083 	beq.w	8003ff2 <_printf_i+0x136>
 8003eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ef4:	e032      	b.n	8003f5c <_printf_i+0xa0>
 8003ef6:	2964      	cmp	r1, #100	; 0x64
 8003ef8:	d001      	beq.n	8003efe <_printf_i+0x42>
 8003efa:	2969      	cmp	r1, #105	; 0x69
 8003efc:	d1f6      	bne.n	8003eec <_printf_i+0x30>
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	6813      	ldr	r3, [r2, #0]
 8003f02:	0605      	lsls	r5, r0, #24
 8003f04:	f103 0104 	add.w	r1, r3, #4
 8003f08:	d52a      	bpl.n	8003f60 <_printf_i+0xa4>
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da03      	bge.n	8003f1a <_printf_i+0x5e>
 8003f12:	222d      	movs	r2, #45	; 0x2d
 8003f14:	425b      	negs	r3, r3
 8003f16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f1a:	486f      	ldr	r0, [pc, #444]	; (80040d8 <_printf_i+0x21c>)
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	e039      	b.n	8003f94 <_printf_i+0xd8>
 8003f20:	2973      	cmp	r1, #115	; 0x73
 8003f22:	f000 809d 	beq.w	8004060 <_printf_i+0x1a4>
 8003f26:	d808      	bhi.n	8003f3a <_printf_i+0x7e>
 8003f28:	296f      	cmp	r1, #111	; 0x6f
 8003f2a:	d020      	beq.n	8003f6e <_printf_i+0xb2>
 8003f2c:	2970      	cmp	r1, #112	; 0x70
 8003f2e:	d1dd      	bne.n	8003eec <_printf_i+0x30>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f043 0320 	orr.w	r3, r3, #32
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	e003      	b.n	8003f42 <_printf_i+0x86>
 8003f3a:	2975      	cmp	r1, #117	; 0x75
 8003f3c:	d017      	beq.n	8003f6e <_printf_i+0xb2>
 8003f3e:	2978      	cmp	r1, #120	; 0x78
 8003f40:	d1d4      	bne.n	8003eec <_printf_i+0x30>
 8003f42:	2378      	movs	r3, #120	; 0x78
 8003f44:	4865      	ldr	r0, [pc, #404]	; (80040dc <_printf_i+0x220>)
 8003f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f4a:	e055      	b.n	8003ff8 <_printf_i+0x13c>
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f52:	1d19      	adds	r1, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6011      	str	r1, [r2, #0]
 8003f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e08c      	b.n	800407a <_printf_i+0x1be>
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f66:	6011      	str	r1, [r2, #0]
 8003f68:	bf18      	it	ne
 8003f6a:	b21b      	sxthne	r3, r3
 8003f6c:	e7cf      	b.n	8003f0e <_printf_i+0x52>
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	6825      	ldr	r5, [r4, #0]
 8003f72:	1d18      	adds	r0, r3, #4
 8003f74:	6010      	str	r0, [r2, #0]
 8003f76:	0628      	lsls	r0, r5, #24
 8003f78:	d501      	bpl.n	8003f7e <_printf_i+0xc2>
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	e002      	b.n	8003f84 <_printf_i+0xc8>
 8003f7e:	0668      	lsls	r0, r5, #25
 8003f80:	d5fb      	bpl.n	8003f7a <_printf_i+0xbe>
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	296f      	cmp	r1, #111	; 0x6f
 8003f86:	bf14      	ite	ne
 8003f88:	220a      	movne	r2, #10
 8003f8a:	2208      	moveq	r2, #8
 8003f8c:	4852      	ldr	r0, [pc, #328]	; (80040d8 <_printf_i+0x21c>)
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f94:	6865      	ldr	r5, [r4, #4]
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	60a5      	str	r5, [r4, #8]
 8003f9a:	f2c0 8095 	blt.w	80040c8 <_printf_i+0x20c>
 8003f9e:	6821      	ldr	r1, [r4, #0]
 8003fa0:	f021 0104 	bic.w	r1, r1, #4
 8003fa4:	6021      	str	r1, [r4, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d13d      	bne.n	8004026 <_printf_i+0x16a>
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	f040 808e 	bne.w	80040cc <_printf_i+0x210>
 8003fb0:	4665      	mov	r5, ip
 8003fb2:	2a08      	cmp	r2, #8
 8003fb4:	d10b      	bne.n	8003fce <_printf_i+0x112>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	07db      	lsls	r3, r3, #31
 8003fba:	d508      	bpl.n	8003fce <_printf_i+0x112>
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	6862      	ldr	r2, [r4, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bfde      	ittt	le
 8003fc4:	2330      	movle	r3, #48	; 0x30
 8003fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fce:	ebac 0305 	sub.w	r3, ip, r5
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	f8cd 8000 	str.w	r8, [sp]
 8003fd8:	463b      	mov	r3, r7
 8003fda:	aa03      	add	r2, sp, #12
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f7ff fef6 	bl	8003dd0 <_printf_common>
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d14d      	bne.n	8004084 <_printf_i+0x1c8>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fec:	b005      	add	sp, #20
 8003fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ff2:	4839      	ldr	r0, [pc, #228]	; (80040d8 <_printf_i+0x21c>)
 8003ff4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	6821      	ldr	r1, [r4, #0]
 8003ffc:	1d1d      	adds	r5, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6015      	str	r5, [r2, #0]
 8004002:	060a      	lsls	r2, r1, #24
 8004004:	d50b      	bpl.n	800401e <_printf_i+0x162>
 8004006:	07ca      	lsls	r2, r1, #31
 8004008:	bf44      	itt	mi
 800400a:	f041 0120 	orrmi.w	r1, r1, #32
 800400e:	6021      	strmi	r1, [r4, #0]
 8004010:	b91b      	cbnz	r3, 800401a <_printf_i+0x15e>
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	f022 0220 	bic.w	r2, r2, #32
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	e7b7      	b.n	8003f8e <_printf_i+0xd2>
 800401e:	064d      	lsls	r5, r1, #25
 8004020:	bf48      	it	mi
 8004022:	b29b      	uxthmi	r3, r3
 8004024:	e7ef      	b.n	8004006 <_printf_i+0x14a>
 8004026:	4665      	mov	r5, ip
 8004028:	fbb3 f1f2 	udiv	r1, r3, r2
 800402c:	fb02 3311 	mls	r3, r2, r1, r3
 8004030:	5cc3      	ldrb	r3, [r0, r3]
 8004032:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004036:	460b      	mov	r3, r1
 8004038:	2900      	cmp	r1, #0
 800403a:	d1f5      	bne.n	8004028 <_printf_i+0x16c>
 800403c:	e7b9      	b.n	8003fb2 <_printf_i+0xf6>
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	6825      	ldr	r5, [r4, #0]
 8004042:	1d18      	adds	r0, r3, #4
 8004044:	6961      	ldr	r1, [r4, #20]
 8004046:	6010      	str	r0, [r2, #0]
 8004048:	0628      	lsls	r0, r5, #24
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	d501      	bpl.n	8004052 <_printf_i+0x196>
 800404e:	6019      	str	r1, [r3, #0]
 8004050:	e002      	b.n	8004058 <_printf_i+0x19c>
 8004052:	066a      	lsls	r2, r5, #25
 8004054:	d5fb      	bpl.n	800404e <_printf_i+0x192>
 8004056:	8019      	strh	r1, [r3, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	4665      	mov	r5, ip
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	e7b9      	b.n	8003fd4 <_printf_i+0x118>
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	1d19      	adds	r1, r3, #4
 8004064:	6011      	str	r1, [r2, #0]
 8004066:	681d      	ldr	r5, [r3, #0]
 8004068:	6862      	ldr	r2, [r4, #4]
 800406a:	2100      	movs	r1, #0
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f837 	bl	80040e0 <memchr>
 8004072:	b108      	cbz	r0, 8004078 <_printf_i+0x1bc>
 8004074:	1b40      	subs	r0, r0, r5
 8004076:	6060      	str	r0, [r4, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004082:	e7a7      	b.n	8003fd4 <_printf_i+0x118>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	462a      	mov	r2, r5
 8004088:	4639      	mov	r1, r7
 800408a:	4630      	mov	r0, r6
 800408c:	47c0      	blx	r8
 800408e:	3001      	adds	r0, #1
 8004090:	d0aa      	beq.n	8003fe8 <_printf_i+0x12c>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	079b      	lsls	r3, r3, #30
 8004096:	d413      	bmi.n	80040c0 <_printf_i+0x204>
 8004098:	68e0      	ldr	r0, [r4, #12]
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	4298      	cmp	r0, r3
 800409e:	bfb8      	it	lt
 80040a0:	4618      	movlt	r0, r3
 80040a2:	e7a3      	b.n	8003fec <_printf_i+0x130>
 80040a4:	2301      	movs	r3, #1
 80040a6:	464a      	mov	r2, r9
 80040a8:	4639      	mov	r1, r7
 80040aa:	4630      	mov	r0, r6
 80040ac:	47c0      	blx	r8
 80040ae:	3001      	adds	r0, #1
 80040b0:	d09a      	beq.n	8003fe8 <_printf_i+0x12c>
 80040b2:	3501      	adds	r5, #1
 80040b4:	68e3      	ldr	r3, [r4, #12]
 80040b6:	9a03      	ldr	r2, [sp, #12]
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	42ab      	cmp	r3, r5
 80040bc:	dcf2      	bgt.n	80040a4 <_printf_i+0x1e8>
 80040be:	e7eb      	b.n	8004098 <_printf_i+0x1dc>
 80040c0:	2500      	movs	r5, #0
 80040c2:	f104 0919 	add.w	r9, r4, #25
 80040c6:	e7f5      	b.n	80040b4 <_printf_i+0x1f8>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ac      	bne.n	8004026 <_printf_i+0x16a>
 80040cc:	7803      	ldrb	r3, [r0, #0]
 80040ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040d6:	e76c      	b.n	8003fb2 <_printf_i+0xf6>
 80040d8:	08004389 	.word	0x08004389
 80040dc:	0800439a 	.word	0x0800439a

080040e0 <memchr>:
 80040e0:	b510      	push	{r4, lr}
 80040e2:	b2c9      	uxtb	r1, r1
 80040e4:	4402      	add	r2, r0
 80040e6:	4290      	cmp	r0, r2
 80040e8:	4603      	mov	r3, r0
 80040ea:	d101      	bne.n	80040f0 <memchr+0x10>
 80040ec:	2300      	movs	r3, #0
 80040ee:	e003      	b.n	80040f8 <memchr+0x18>
 80040f0:	781c      	ldrb	r4, [r3, #0]
 80040f2:	3001      	adds	r0, #1
 80040f4:	428c      	cmp	r4, r1
 80040f6:	d1f6      	bne.n	80040e6 <memchr+0x6>
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd10      	pop	{r4, pc}

080040fc <memcpy>:
 80040fc:	b510      	push	{r4, lr}
 80040fe:	1e43      	subs	r3, r0, #1
 8004100:	440a      	add	r2, r1
 8004102:	4291      	cmp	r1, r2
 8004104:	d100      	bne.n	8004108 <memcpy+0xc>
 8004106:	bd10      	pop	{r4, pc}
 8004108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800410c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004110:	e7f7      	b.n	8004102 <memcpy+0x6>

08004112 <memmove>:
 8004112:	4288      	cmp	r0, r1
 8004114:	b510      	push	{r4, lr}
 8004116:	eb01 0302 	add.w	r3, r1, r2
 800411a:	d807      	bhi.n	800412c <memmove+0x1a>
 800411c:	1e42      	subs	r2, r0, #1
 800411e:	4299      	cmp	r1, r3
 8004120:	d00a      	beq.n	8004138 <memmove+0x26>
 8004122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004126:	f802 4f01 	strb.w	r4, [r2, #1]!
 800412a:	e7f8      	b.n	800411e <memmove+0xc>
 800412c:	4283      	cmp	r3, r0
 800412e:	d9f5      	bls.n	800411c <memmove+0xa>
 8004130:	1881      	adds	r1, r0, r2
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	42d3      	cmn	r3, r2
 8004136:	d100      	bne.n	800413a <memmove+0x28>
 8004138:	bd10      	pop	{r4, pc}
 800413a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800413e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004142:	e7f7      	b.n	8004134 <memmove+0x22>

08004144 <_free_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4605      	mov	r5, r0
 8004148:	2900      	cmp	r1, #0
 800414a:	d043      	beq.n	80041d4 <_free_r+0x90>
 800414c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004150:	1f0c      	subs	r4, r1, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	bfb8      	it	lt
 8004156:	18e4      	addlt	r4, r4, r3
 8004158:	f000 f8d0 	bl	80042fc <__malloc_lock>
 800415c:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <_free_r+0x94>)
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	4610      	mov	r0, r2
 8004162:	b933      	cbnz	r3, 8004172 <_free_r+0x2e>
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	6014      	str	r4, [r2, #0]
 8004168:	4628      	mov	r0, r5
 800416a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800416e:	f000 b8c6 	b.w	80042fe <__malloc_unlock>
 8004172:	42a3      	cmp	r3, r4
 8004174:	d90b      	bls.n	800418e <_free_r+0x4a>
 8004176:	6821      	ldr	r1, [r4, #0]
 8004178:	1862      	adds	r2, r4, r1
 800417a:	4293      	cmp	r3, r2
 800417c:	bf01      	itttt	eq
 800417e:	681a      	ldreq	r2, [r3, #0]
 8004180:	685b      	ldreq	r3, [r3, #4]
 8004182:	1852      	addeq	r2, r2, r1
 8004184:	6022      	streq	r2, [r4, #0]
 8004186:	6063      	str	r3, [r4, #4]
 8004188:	6004      	str	r4, [r0, #0]
 800418a:	e7ed      	b.n	8004168 <_free_r+0x24>
 800418c:	4613      	mov	r3, r2
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	b10a      	cbz	r2, 8004196 <_free_r+0x52>
 8004192:	42a2      	cmp	r2, r4
 8004194:	d9fa      	bls.n	800418c <_free_r+0x48>
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	1858      	adds	r0, r3, r1
 800419a:	42a0      	cmp	r0, r4
 800419c:	d10b      	bne.n	80041b6 <_free_r+0x72>
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	4401      	add	r1, r0
 80041a2:	1858      	adds	r0, r3, r1
 80041a4:	4282      	cmp	r2, r0
 80041a6:	6019      	str	r1, [r3, #0]
 80041a8:	d1de      	bne.n	8004168 <_free_r+0x24>
 80041aa:	6810      	ldr	r0, [r2, #0]
 80041ac:	6852      	ldr	r2, [r2, #4]
 80041ae:	4401      	add	r1, r0
 80041b0:	6019      	str	r1, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	e7d8      	b.n	8004168 <_free_r+0x24>
 80041b6:	d902      	bls.n	80041be <_free_r+0x7a>
 80041b8:	230c      	movs	r3, #12
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	e7d4      	b.n	8004168 <_free_r+0x24>
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	1821      	adds	r1, r4, r0
 80041c2:	428a      	cmp	r2, r1
 80041c4:	bf01      	itttt	eq
 80041c6:	6811      	ldreq	r1, [r2, #0]
 80041c8:	6852      	ldreq	r2, [r2, #4]
 80041ca:	1809      	addeq	r1, r1, r0
 80041cc:	6021      	streq	r1, [r4, #0]
 80041ce:	6062      	str	r2, [r4, #4]
 80041d0:	605c      	str	r4, [r3, #4]
 80041d2:	e7c9      	b.n	8004168 <_free_r+0x24>
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	bf00      	nop
 80041d8:	20000090 	.word	0x20000090

080041dc <_malloc_r>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	1ccd      	adds	r5, r1, #3
 80041e0:	f025 0503 	bic.w	r5, r5, #3
 80041e4:	3508      	adds	r5, #8
 80041e6:	2d0c      	cmp	r5, #12
 80041e8:	bf38      	it	cc
 80041ea:	250c      	movcc	r5, #12
 80041ec:	2d00      	cmp	r5, #0
 80041ee:	4606      	mov	r6, r0
 80041f0:	db01      	blt.n	80041f6 <_malloc_r+0x1a>
 80041f2:	42a9      	cmp	r1, r5
 80041f4:	d903      	bls.n	80041fe <_malloc_r+0x22>
 80041f6:	230c      	movs	r3, #12
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	2000      	movs	r0, #0
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	f000 f87d 	bl	80042fc <__malloc_lock>
 8004202:	4a21      	ldr	r2, [pc, #132]	; (8004288 <_malloc_r+0xac>)
 8004204:	6814      	ldr	r4, [r2, #0]
 8004206:	4621      	mov	r1, r4
 8004208:	b991      	cbnz	r1, 8004230 <_malloc_r+0x54>
 800420a:	4c20      	ldr	r4, [pc, #128]	; (800428c <_malloc_r+0xb0>)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	b91b      	cbnz	r3, 8004218 <_malloc_r+0x3c>
 8004210:	4630      	mov	r0, r6
 8004212:	f000 f863 	bl	80042dc <_sbrk_r>
 8004216:	6020      	str	r0, [r4, #0]
 8004218:	4629      	mov	r1, r5
 800421a:	4630      	mov	r0, r6
 800421c:	f000 f85e 	bl	80042dc <_sbrk_r>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d124      	bne.n	800426e <_malloc_r+0x92>
 8004224:	230c      	movs	r3, #12
 8004226:	4630      	mov	r0, r6
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	f000 f868 	bl	80042fe <__malloc_unlock>
 800422e:	e7e4      	b.n	80041fa <_malloc_r+0x1e>
 8004230:	680b      	ldr	r3, [r1, #0]
 8004232:	1b5b      	subs	r3, r3, r5
 8004234:	d418      	bmi.n	8004268 <_malloc_r+0x8c>
 8004236:	2b0b      	cmp	r3, #11
 8004238:	d90f      	bls.n	800425a <_malloc_r+0x7e>
 800423a:	600b      	str	r3, [r1, #0]
 800423c:	18cc      	adds	r4, r1, r3
 800423e:	50cd      	str	r5, [r1, r3]
 8004240:	4630      	mov	r0, r6
 8004242:	f000 f85c 	bl	80042fe <__malloc_unlock>
 8004246:	f104 000b 	add.w	r0, r4, #11
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	f020 0007 	bic.w	r0, r0, #7
 8004250:	1ac3      	subs	r3, r0, r3
 8004252:	d0d3      	beq.n	80041fc <_malloc_r+0x20>
 8004254:	425a      	negs	r2, r3
 8004256:	50e2      	str	r2, [r4, r3]
 8004258:	e7d0      	b.n	80041fc <_malloc_r+0x20>
 800425a:	684b      	ldr	r3, [r1, #4]
 800425c:	428c      	cmp	r4, r1
 800425e:	bf16      	itet	ne
 8004260:	6063      	strne	r3, [r4, #4]
 8004262:	6013      	streq	r3, [r2, #0]
 8004264:	460c      	movne	r4, r1
 8004266:	e7eb      	b.n	8004240 <_malloc_r+0x64>
 8004268:	460c      	mov	r4, r1
 800426a:	6849      	ldr	r1, [r1, #4]
 800426c:	e7cc      	b.n	8004208 <_malloc_r+0x2c>
 800426e:	1cc4      	adds	r4, r0, #3
 8004270:	f024 0403 	bic.w	r4, r4, #3
 8004274:	42a0      	cmp	r0, r4
 8004276:	d005      	beq.n	8004284 <_malloc_r+0xa8>
 8004278:	1a21      	subs	r1, r4, r0
 800427a:	4630      	mov	r0, r6
 800427c:	f000 f82e 	bl	80042dc <_sbrk_r>
 8004280:	3001      	adds	r0, #1
 8004282:	d0cf      	beq.n	8004224 <_malloc_r+0x48>
 8004284:	6025      	str	r5, [r4, #0]
 8004286:	e7db      	b.n	8004240 <_malloc_r+0x64>
 8004288:	20000090 	.word	0x20000090
 800428c:	20000094 	.word	0x20000094

08004290 <_realloc_r>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	4607      	mov	r7, r0
 8004294:	4614      	mov	r4, r2
 8004296:	460e      	mov	r6, r1
 8004298:	b921      	cbnz	r1, 80042a4 <_realloc_r+0x14>
 800429a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800429e:	4611      	mov	r1, r2
 80042a0:	f7ff bf9c 	b.w	80041dc <_malloc_r>
 80042a4:	b922      	cbnz	r2, 80042b0 <_realloc_r+0x20>
 80042a6:	f7ff ff4d 	bl	8004144 <_free_r>
 80042aa:	4625      	mov	r5, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b0:	f000 f826 	bl	8004300 <_malloc_usable_size_r>
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d20f      	bcs.n	80042d8 <_realloc_r+0x48>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff ff8e 	bl	80041dc <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0f2      	beq.n	80042ac <_realloc_r+0x1c>
 80042c6:	4631      	mov	r1, r6
 80042c8:	4622      	mov	r2, r4
 80042ca:	f7ff ff17 	bl	80040fc <memcpy>
 80042ce:	4631      	mov	r1, r6
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff ff37 	bl	8004144 <_free_r>
 80042d6:	e7e9      	b.n	80042ac <_realloc_r+0x1c>
 80042d8:	4635      	mov	r5, r6
 80042da:	e7e7      	b.n	80042ac <_realloc_r+0x1c>

080042dc <_sbrk_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	2300      	movs	r3, #0
 80042e0:	4c05      	ldr	r4, [pc, #20]	; (80042f8 <_sbrk_r+0x1c>)
 80042e2:	4605      	mov	r5, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	f7ff fb48 	bl	800397c <_sbrk>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_sbrk_r+0x1a>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_sbrk_r+0x1a>
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	20000130 	.word	0x20000130

080042fc <__malloc_lock>:
 80042fc:	4770      	bx	lr

080042fe <__malloc_unlock>:
 80042fe:	4770      	bx	lr

08004300 <_malloc_usable_size_r>:
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f18      	subs	r0, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfbc      	itt	lt
 800430a:	580b      	ldrlt	r3, [r1, r0]
 800430c:	18c0      	addlt	r0, r0, r3
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
